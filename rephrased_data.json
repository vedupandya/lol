[
  {
    "Input": "Remove rows that have missing values in the DataFrame.",
    "Output": "df.dropna(inplace=True)"
  },
  {
    "Input": "Delete rows with empty cells from the dataset.",
    "Output": "df.dropna(inplace=True)"
  },
  {
    "Input": "Eliminate rows containing null values in the DataFrame.",
    "Output": "df.dropna(inplace=True)"
  },
  {
    "Input": "Filter out rows with missing data.",
    "Output": "df.dropna(inplace=True)"
  },
  {
    "Input": "Discard rows that contain null entries.",
    "Output": "df.dropna(inplace=True)"
  },
  {
    "Input": "Clean the DataFrame by removing rows with nulls.",
    "Output": "df.dropna(inplace=True)"
  },
  {
    "Input": "Get rid of rows with missing values in the dataset.",
    "Output": "df.dropna(inplace=True)"
  },
  {
    "Input": "Remove rows where any column has null values.",
    "Output": "df.dropna(inplace=True)"
  },
  {
    "Input": "Drop rows with NaN values from the DataFrame.",
    "Output": "df.dropna(inplace=True)"
  },
  {
    "Input": "Handle missing values by dropping rows.",
    "Output": "df.dropna(inplace=True)"
  },
  {
    "Input": "Remove the gender column from the dataframe.",
    "Output": "df.drop(['gender'], axis=1, inplace=True)"
  },
  {
    "Input": "Delete the 'gender' column from the dataset.",
    "Output": "df.drop(['gender'], axis=1, inplace=True)"
  },
  {
    "Input": "Eliminate the gender feature from the dataframe.",
    "Output": "df.drop(['gender'], axis=1, inplace=True)"
  },
  {
    "Input": "Get rid of the 'gender' column from the dataset.",
    "Output": "df.drop(['gender'], axis=1, inplace=True)"
  },
  {
    "Input": "Remove the gender column from the table.",
    "Output": "df.drop(['gender'], axis=1, inplace=True)"
  },
  {
    "Input": "Remove gender information from the dataset.",
    "Output": "df.drop(['gender'], axis=1, inplace=True)"
  },
  {
    "Input": "Discard the 'gender' column from the dataframe.",
    "Output": "df.drop(['gender'], axis=1, inplace=True)"
  },
  {
    "Input": "Drop the 'gender' column from the dataset.",
    "Output": "df.drop(['gender'], axis=1, inplace=True)"
  },
  {
    "Input": "Remove the 'gender' attribute from the data.",
    "Output": "df.drop(['gender'], axis=1, inplace=True)"
  },
  {
    "Input": "Remove the gender variable from the dataframe.",
    "Output": "df.drop(['gender'], axis=1, inplace=True)"
  },
  {
    "Input": "Replace missing values with zeros.",
    "Output": "df.fillna(0,inplace=True)"
  },
  {
    "Input": "Impute missing values using zero.",
    "Output": "df.fillna(0,inplace=True)"
  },
  {
    "Input": "Fill in the blanks with 0.",
    "Output": "df.fillna(0,inplace=True)"
  },
  {
    "Input": "Set missing values to 0.",
    "Output": "df.fillna(0,inplace=True)"
  },
  {
    "Input": "Populate missing entries with zeros.",
    "Output": "df.fillna(0,inplace=True)"
  },
  {
    "Input": "Handle missing data by replacing it with 0.",
    "Output": "df.fillna(0,inplace=True)"
  },
  {
    "Input": "Replace null values with 0.",
    "Output": "df.fillna(0,inplace=True)"
  },
  { "Input": "Fill NaN values with 0.", "Output": "df.fillna(0,inplace=True)" },
  { "Input": "Zero out missing data.", "Output": "df.fillna(0,inplace=True)" },
  {
    "Input": "Impute missing data points with 0.",
    "Output": "df.fillna(0,inplace=True)"
  },
  {
    "Input": "Filter the dataframe 'df' to only include rows where the 'marks' column has values greater than 10.",
    "Output": "df = df[df['marks']>10]"
  },
  {
    "Input": "Remove rows from 'df' where the 'marks' column is less than or equal to 10.",
    "Output": "df = df[df['marks']>10]"
  },
  {
    "Input": "Select rows in 'df' with 'marks' values exceeding 10.",
    "Output": "df = df[df['marks']>10]"
  },
  {
    "Input": "Keep only entries in 'df' that have a 'marks' value greater than 10.",
    "Output": "df = df[df['marks']>10]"
  },
  {
    "Input": "Subset the 'df' dataframe to include only records with 'marks' above 10.",
    "Output": "df = df[df['marks']>10]"
  },
  {
    "Input": "Retrieve the rows from 'df' where the 'marks' column is over 10.",
    "Output": "df = df[df['marks']>10]"
  },
  {
    "Input": "Isolate the rows in 'df' whose 'marks' value is larger than 10.",
    "Output": "df = df[df['marks']>10]"
  },
  {
    "Input": "Extract the portion of 'df' with 'marks' values surpassing 10.",
    "Output": "df = df[df['marks']>10]"
  },
  {
    "Input": "Obtain a new dataframe from 'df', containing only rows where 'marks' is greater than 10.",
    "Output": "df = df[df['marks']>10]"
  },
  {
    "Input": "Create a filtered version of 'df' by keeping only the rows with 'marks' values above 10.",
    "Output": "df = df[df['marks']>10]"
  },
  {
    "Input": "Filter the 'marks' column for values greater than 10 using a query.",
    "Output": "df = df.query('marks > 10')"
  },
  {
    "Input": "Select rows where the 'marks' column exceeds 10 using a query.",
    "Output": "df = df.query('marks > 10')"
  },
  {
    "Input": "Keep only the data in the 'marks' column that is greater than 10 using a query.",
    "Output": "df = df.query('marks > 10')"
  },
  {
    "Input": "Isolate rows with 'marks' values exceeding 10 using a query.",
    "Output": "df = df.query('marks > 10')"
  },
  {
    "Input": "Subset the DataFrame to include only rows where 'marks' is greater than 10 using a query.",
    "Output": "df = df.query('marks > 10')"
  },
  {
    "Input": "Apply a query to the DataFrame to retain entries with 'marks' larger than 10.",
    "Output": "df = df.query('marks > 10')"
  },
  {
    "Input": "Use a query to filter the DataFrame based on 'marks' being greater than 10.",
    "Output": "df = df.query('marks > 10')"
  },
  {
    "Input": "Extract rows from the DataFrame where the 'marks' value surpasses 10 using a query.",
    "Output": "df = df.query('marks > 10')"
  },
  {
    "Input": "Select data from the 'marks' column where the values exceed 10 using a query.",
    "Output": "df = df.query('marks > 10')"
  },
  {
    "Input": "Filter the DataFrame by applying a query to the 'marks' column, keeping only values greater than 10.",
    "Output": "df = df.query('marks > 10')"
  },
  {
    "Input": "Change the column header 'name' to 'first_name'.",
    "Output": "df.rename(columns={'name':'first_name'},inplace=True)"
  },
  {
    "Input": "Rename column 'name' to 'first_name'.",
    "Output": "df.rename(columns={'name':'first_name'},inplace=True)"
  },
  {
    "Input": "Give the column named 'name' a new name: 'first_name'.",
    "Output": "df.rename(columns={'name':'first_name'},inplace=True)"
  },
  {
    "Input": "Modify the column header 'name' to 'first_name'.",
    "Output": "df.rename(columns={'name':'first_name'},inplace=True)"
  },
  {
    "Input": "Update the column label 'name' to 'first_name'.",
    "Output": "df.rename(columns={'name':'first_name'},inplace=True)"
  },
  {
    "Input": "Transform the column named 'name' to 'first_name'.",
    "Output": "df.rename(columns={'name':'first_name'},inplace=True)"
  },
  {
    "Input": "Change the column heading 'name' to 'first_name'.",
    "Output": "df.rename(columns={'name':'first_name'},inplace=True)"
  },
  {
    "Input": "Alter the name of the column 'name' to 'first_name'.",
    "Output": "df.rename(columns={'name':'first_name'},inplace=True)"
  },
  {
    "Input": "Adjust the column title 'name' to 'first_name'.",
    "Output": "df.rename(columns={'name':'first_name'},inplace=True)"
  },
  {
    "Input": "Replace the column header 'name' with 'first_name'.",
    "Output": "df.rename(columns={'name':'first_name'},inplace=True)"
  },
  {
    "Input": "Remove duplicate rows from the DataFrame.",
    "Output": "df.drop_duplicates(inplace=True)"
  },
  {
    "Input": "Eliminate redundant entries in the DataFrame.",
    "Output": "df.drop_duplicates(inplace=True)"
  },
  {
    "Input": "Remove duplicate records from the DataFrame.",
    "Output": "df.drop_duplicates(inplace=True)"
  },
  {
    "Input": "Clean the DataFrame by removing duplicate rows.",
    "Output": "df.drop_duplicates(inplace=True)"
  },
  {
    "Input": "Deduplicate the DataFrame.",
    "Output": "df.drop_duplicates(inplace=True)"
  },
  {
    "Input": "Ensure each row in the DataFrame is unique.",
    "Output": "df.drop_duplicates(inplace=True)"
  },
  {
    "Input": "Remove duplicate instances of data.",
    "Output": "df.drop_duplicates(inplace=True)"
  },
  {
    "Input": "Get rid of all duplicate rows.",
    "Output": "df.drop_duplicates(inplace=True)"
  },
  {
    "Input": "Filter out duplicate data from the DataFrame.",
    "Output": "df.drop_duplicates(inplace=True)"
  },
  {
    "Input": "Keep only the unique rows in the DataFrame.",
    "Output": "df.drop_duplicates(inplace=True)"
  },
  {
    "Input": "Calculate the average of columns 'marks1', 'marks2', 'marks3' and store it in a new column named 'mean'.",
    "Output": "df['mean'] = df[['marks1', 'marks2', 'marks3']].mean(axis=1)"
  },
  {
    "Input": "Add a column named 'mean' to the dataframe and populate it with the average of columns 'marks1', 'marks2', 'marks3'.",
    "Output": "df['mean'] = df[['marks1', 'marks2', 'marks3']].mean(axis=1)"
  },
  {
    "Input": "Compute the mean of columns 'marks1', 'marks2', 'marks3' for each row and store the result in a new column called 'mean'.",
    "Output": "df['mean'] = df[['marks1', 'marks2', 'marks3']].mean(axis=1)"
  },
  {
    "Input": "Create a column 'mean' that holds the average values of columns 'marks1', 'marks2', 'marks3' for each row.",
    "Output": "df['mean'] = df[['marks1', 'marks2', 'marks3']].mean(axis=1)"
  },
  {
    "Input": "Generate a new column named 'mean' representing the average of columns 'marks1', 'marks2', 'marks3' across rows.",
    "Output": "df['mean'] = df[['marks1', 'marks2', 'marks3']].mean(axis=1)"
  },
  {
    "Input": "Determine the average of columns 'marks1', 'marks2', 'marks3' and assign it to a new column named 'mean'.",
    "Output": "df['mean'] = df[['marks1', 'marks2', 'marks3']].mean(axis=1)"
  },
  {
    "Input": "Incorporate a new column named 'mean' containing the average of columns 'marks1', 'marks2', 'marks3'.",
    "Output": "df['mean'] = df[['marks1', 'marks2', 'marks3']].mean(axis=1)"
  },
  {
    "Input": "Add a column labeled 'mean' to the dataframe, storing the row-wise average of columns 'marks1', 'marks2', 'marks3'.",
    "Output": "df['mean'] = df[['marks1', 'marks2', 'marks3']].mean(axis=1)"
  },
  {
    "Input": "Introduce a new column called 'mean' and populate it with the mean of columns 'marks1', 'marks2', 'marks3' across rows.",
    "Output": "df['mean'] = df[['marks1', 'marks2', 'marks3']].mean(axis=1)"
  },
  {
    "Input": "Construct a column named 'mean' to hold the average value of columns 'marks1', 'marks2', 'marks3' for each record.",
    "Output": "df['mean'] = df[['marks1', 'marks2', 'marks3']].mean(axis=1)"
  },
  {
    "Input": "Create a new column named 'median' and store the median of columns 'marks1', 'marks2', and 'marks3' in it.",
    "Output": "df['median'] = df[['marks1', 'marks2', 'marks3']].median(axis=1)"
  },
  {
    "Input": "Add a new column called 'median' to the DataFrame and fill it with the median of columns 'marks1', 'marks2', and 'marks3'.",
    "Output": "df['median'] = df[['marks1', 'marks2', 'marks3']].median(axis=1)"
  },
  {
    "Input": "Calculate the median of 'marks1', 'marks2', and 'marks3' and assign it to a new column named 'median'.",
    "Output": "df['median'] = df[['marks1', 'marks2', 'marks3']].median(axis=1)"
  },
  {
    "Input": "Generate a 'median' column containing the median value of columns 'marks1', 'marks2', and 'marks3' for each row.",
    "Output": "df['median'] = df[['marks1', 'marks2', 'marks3']].median(axis=1)"
  },
  {
    "Input": "Compute the median of columns 'marks1', 'marks2', and 'marks3' and store the result in a new column called 'median'.",
    "Output": "df['median'] = df[['marks1', 'marks2', 'marks3']].median(axis=1)"
  },
  {
    "Input": "Create a 'median' column by calculating the median of 'marks1', 'marks2', and 'marks3' for each row.",
    "Output": "df['median'] = df[['marks1', 'marks2', 'marks3']].median(axis=1)"
  },
  {
    "Input": "Add a column named 'median' to the DataFrame where each value is the median of columns 'marks1', 'marks2', and 'marks3' for the corresponding row.",
    "Output": "df['median'] = df[['marks1', 'marks2', 'marks3']].median(axis=1)"
  },
  {
    "Input": "Introduce a new column called 'median' and populate it with the median values of 'marks1', 'marks2', and 'marks3' for each row.",
    "Output": "df['median'] = df[['marks1', 'marks2', 'marks3']].median(axis=1)"
  },
  {
    "Input": "For each row, determine the median value of columns 'marks1', 'marks2', and 'marks3' and store it in a newly created 'median' column.",
    "Output": "df['median'] = df[['marks1', 'marks2', 'marks3']].median(axis=1)"
  },
  {
    "Input": "In the DataFrame, create a new column called 'median' and populate it with the median of 'marks1', 'marks2', and 'marks3' across each row.",
    "Output": "df['median'] = df[['marks1', 'marks2', 'marks3']].median(axis=1)"
  },
  {
    "Input": "Add a column named 'mode' to the DataFrame, with its values being the mode of columns 'marks1', 'marks2', and 'marks3'.",
    "Output": "df['mode'] = df[['marks1', 'marks2', 'marks3']].mode(axis=1)"
  },
  {
    "Input": "Compute the mode for each row across columns 'marks1', 'marks2', and 'marks3', and save the result in a new column called 'mode'.",
    "Output": "df['mode'] = df[['marks1', 'marks2', 'marks3']].mode(axis=1)"
  },
  {
    "Input": "Calculate the modal value for each row within the columns 'marks1', 'marks2', and 'marks3', and store the results in a new column named 'mode'.",
    "Output": "df['mode'] = df[['marks1', 'marks2', 'marks3']].mode(axis=1)"
  },
  {
    "Input": "Determine the most frequent value for each row across the columns 'marks1', 'marks2', and 'marks3', and create a new column 'mode' to store these values.",
    "Output": "df['mode'] = df[['marks1', 'marks2', 'marks3']].mode(axis=1)"
  },
  {
    "Input": "Generate a new column 'mode' in the DataFrame, where each row's value represents the mode of columns 'marks1', 'marks2', and 'marks3'.",
    "Output": "df['mode'] = df[['marks1', 'marks2', 'marks3']].mode(axis=1)"
  },
  {
    "Input": "Introduce a column called 'mode' to the DataFrame, and populate it with the mode of the columns 'marks1', 'marks2', and 'marks3' for each row.",
    "Output": "df['mode'] = df[['marks1', 'marks2', 'marks3']].mode(axis=1)"
  },
  {
    "Input": "Create a new column named 'mode' and fill it with the modal values calculated for each row across columns 'marks1', 'marks2', and 'marks3'.",
    "Output": "df['mode'] = df[['marks1', 'marks2', 'marks3']].mode(axis=1)"
  },
  {
    "Input": "For each row in the DataFrame, find the mode of columns 'marks1', 'marks2', and 'marks3', and then store the result in a new column called 'mode'.",
    "Output": "df['mode'] = df[['marks1', 'marks2', 'marks3']].mode(axis=1)"
  },
  {
    "Input": "Calculate the mode of the columns 'marks1', 'marks2', and 'marks3' for each row, and add this value to a new column named 'mode'.",
    "Output": "df['mode'] = df[['marks1', 'marks2', 'marks3']].mode(axis=1)"
  },
  {
    "Input": "Add a new column 'mode' to the DataFrame and populate it with the modal values for each row based on columns 'marks1', 'marks2', and 'marks3'.",
    "Output": "df['mode'] = df[['marks1', 'marks2', 'marks3']].mode(axis=1)"
  },
  {
    "Input": "Add a new column named 'status' to the DataFrame, where the value is 'Pass' if the 'marks' column value is greater than 50, otherwise it should be 'Fail'.",
    "Output": "df['status'] = df['marks'].apply(lambda x: 'Pass' if x > 50 else 'Fail')"
  },
  {
    "Input": "Create a 'status' column in the DataFrame that indicates 'Pass' for marks exceeding 50 and 'Fail' for the rest.",
    "Output": "df['status'] = df['marks'].apply(lambda x: 'Pass' if x > 50 else 'Fail')"
  },
  {
    "Input": "Generate a 'status' column based on the 'marks' column, assigning 'Pass' to values above 50 and 'Fail' to the remaining.",
    "Output": "df['status'] = df['marks'].apply(lambda x: 'Pass' if x > 50 else 'Fail')"
  },
  {
    "Input": "In the DataFrame, add a column called 'status' that labels values in the 'marks' column as 'Pass' if they are greater than 50, and 'Fail' otherwise.",
    "Output": "df['status'] = df['marks'].apply(lambda x: 'Pass' if x > 50 else 'Fail')"
  },
  {
    "Input": "Construct a new column named 'status' in the DataFrame, assigning 'Pass' to records where 'marks' is over 50 and 'Fail' to the rest.",
    "Output": "df['status'] = df['marks'].apply(lambda x: 'Pass' if x > 50 else 'Fail')"
  },
  {
    "Input": "Populate a new column named 'status' in the DataFrame, using 'Pass' for 'marks' values exceeding 50 and 'Fail' for the rest.",
    "Output": "df['status'] = df['marks'].apply(lambda x: 'Pass' if x > 50 else 'Fail')"
  },
  {
    "Input": "Insert a 'status' column into the DataFrame, setting it to 'Pass' for marks above 50 and 'Fail' otherwise.",
    "Output": "df['status'] = df['marks'].apply(lambda x: 'Pass' if x > 50 else 'Fail')"
  },
  {
    "Input": "Introduce a new column named 'status' to the DataFrame, indicating 'Pass' for marks over 50 and 'Fail' for the remaining values.",
    "Output": "df['status'] = df['marks'].apply(lambda x: 'Pass' if x > 50 else 'Fail')"
  },
  {
    "Input": "Define a new column called 'status' in the DataFrame, labeling 'marks' values greater than 50 as 'Pass' and the rest as 'Fail'.",
    "Output": "df['status'] = df['marks'].apply(lambda x: 'Pass' if x > 50 else 'Fail')"
  },
  {
    "Input": "Create a new column 'status' in the dataframe that assigns 'Pass' to marks greater than 50 and 'Fail' to the rest.",
    "Output": "df['status'] = df['marks'].apply(lambda x: 'Pass' if x > 50 else 'Fail')"
  },
  {
    "Input": "Compute the rolling average of the 'temperature' column with a window of 5.",
    "Output": "df['temperature_rolling'] = df['temperature'].rolling(window=5).mean()"
  },
  {
    "Input": "Calculate the moving average of 'temperature' with a window size of 5.",
    "Output": "df['temperature_rolling'] = df['temperature'].rolling(window=5).mean()"
  },
  {
    "Input": "Get the 5-day rolling mean for the 'temperature' column.",
    "Output": "df['temperature_rolling'] = df['temperature'].rolling(window=5).mean()"
  },
  {
    "Input": "Apply a rolling mean with a window of 5 to the 'temperature' values.",
    "Output": "df['temperature_rolling'] = df['temperature'].rolling(window=5).mean()"
  },
  {
    "Input": "Create a new column named 'temperature_rolling' by calculating the rolling mean of 'temperature' with a window of 5.",
    "Output": "df['temperature_rolling'] = df['temperature'].rolling(window=5).mean()"
  },
  {
    "Input": "Generate a rolling average of the 'temperature' data using a window size of 5.",
    "Output": "df['temperature_rolling'] = df['temperature'].rolling(window=5).mean()"
  },
  {
    "Input": "Obtain a 5-period rolling mean for the 'temperature' column.",
    "Output": "df['temperature_rolling'] = df['temperature'].rolling(window=5).mean()"
  },
  {
    "Input": "Determine the average temperature over the past 5 periods.",
    "Output": "df['temperature_rolling'] = df['temperature'].rolling(window=5).mean()"
  },
  {
    "Input": "Find the rolling average of 'temperature' with a window length of 5.",
    "Output": "df['temperature_rolling'] = df['temperature'].rolling(window=5).mean()"
  },
  {
    "Input": "Calculate the 5-point rolling mean for the 'temperature' data.",
    "Output": "df['temperature_rolling'] = df['temperature'].rolling(window=5).mean()"
  },
  {
    "Input": "Create a new column named 'difference' that calculates the difference between the values in 'column1' and 'column2'.",
    "Output": "df['difference'] = df['column1'] - df['column2']"
  },
  {
    "Input": "Calculate the difference between 'column1' and 'column2' and store it in a new column called 'difference'.",
    "Output": "df['difference'] = df['column1'] - df['column2']"
  },
  {
    "Input": "Generate a column called 'difference' that represents the subtraction of 'column2' from 'column1'.",
    "Output": "df['difference'] = df['column1'] - df['column2']"
  },
  {
    "Input": "Add a column named 'difference' to the dataframe, which should contain the result of subtracting 'column2' from 'column1'.",
    "Output": "df['difference'] = df['column1'] - df['column2']"
  },
  {
    "Input": "Compute the difference between 'column1' and 'column2' and assign it to a new column named 'difference'.",
    "Output": "df['difference'] = df['column1'] - df['column2']"
  },
  {
    "Input": "Incorporate a new column called 'difference' that shows the subtraction of 'column2' from 'column1'.",
    "Output": "df['difference'] = df['column1'] - df['column2']"
  },
  {
    "Input": "Introduce a column named 'difference' that is calculated by taking the difference between 'column1' and 'column2'.",
    "Output": "df['difference'] = df['column1'] - df['column2']"
  },
  {
    "Input": "Insert a column called 'difference' which contains the difference between the values in 'column1' and 'column2'.",
    "Output": "df['difference'] = df['column1'] - df['column2']"
  },
  {
    "Input": "Construct a new column named 'difference' that calculates the difference between the values in 'column1' and 'column2'.",
    "Output": "df['difference'] = df['column1'] - df['column2']"
  },
  {
    "Input": "Determine the difference between 'column1' and 'column2' and create a new column labeled 'difference' to store the result.",
    "Output": "df['difference'] = df['column1'] - df['column2']"
  },
  {
    "Input": "Filter the dataframe to include only rows where the 'country' column is equal to 'USA'.",
    "Output": "df = df[df['country'] == 'USA']"
  },
  {
    "Input": "Keep only the rows in the dataframe that have 'USA' in the 'country' column.",
    "Output": "df = df[df['country'] == 'USA']"
  },
  {
    "Input": "Extract the rows from the dataframe where the 'country' column is 'USA'.",
    "Output": "df = df[df['country'] == 'USA']"
  },
  {
    "Input": "Subset the dataframe to include only rows with 'USA' in the 'country' column.",
    "Output": "df = df[df['country'] == 'USA']"
  },
  {
    "Input": "Isolate rows where the 'country' column matches 'USA'.",
    "Output": "df = df[df['country'] == 'USA']"
  },
  {
    "Input": "Get only the rows from the dataframe that have a 'country' value of 'USA'.",
    "Output": "df = df[df['country'] == 'USA']"
  },
  {
    "Input": "Select the rows in the dataframe where the 'country' column is equal to 'USA'.",
    "Output": "df = df[df['country'] == 'USA']"
  },
  {
    "Input": "Retrieve the rows from the dataframe whose 'country' value is 'USA'.",
    "Output": "df = df[df['country'] == 'USA']"
  },
  {
    "Input": "Filter the dataframe by the 'country' column, keeping only rows where the value is 'USA'.",
    "Output": "df = df[df['country'] == 'USA']"
  },
  {
    "Input": "Remove all rows from the dataframe that do not have 'USA' in the 'country' column.",
    "Output": "df = df[df['country'] == 'USA']"
  },
  {
    "Input": "Calculate the square of each value in the 'score' column.",
    "Output": "df['score'] = df['score']**2"
  },
  {
    "Input": "Square all values in the 'score' column.",
    "Output": "df['score'] = df['score']**2"
  },
  {
    "Input": "Perform squaring operation on every element in 'score' column.",
    "Output": "df['score'] = df['score']**2"
  },
  {
    "Input": "Elevate each element in 'score' column to the power of 2.",
    "Output": "df['score'] = df['score']**2"
  },
  {
    "Input": "Compute the square of each value within the 'score' column.",
    "Output": "df['score'] = df['score']**2"
  },
  {
    "Input": "Transform the 'score' column by squaring each element.",
    "Output": "df['score'] = df['score']**2"
  },
  {
    "Input": "Apply a square function to all values in the 'score' column.",
    "Output": "df['score'] = df['score']**2"
  },
  {
    "Input": "Square the values in the 'score' column.",
    "Output": "df['score'] = df['score']**2"
  },
  {
    "Input": "Multiply each value in the 'score' column by itself.",
    "Output": "df['score'] = df['score']**2"
  },
  {
    "Input": "Obtain the square of each entry in the 'score' column.",
    "Output": "df['score'] = df['score']**2"
  },
  {
    "Input": "Cube the values in the 'score' column.",
    "Output": "df['score'] = df['score']**3"
  },
  {
    "Input": "Raise each element in the 'score' column to the power of 3.",
    "Output": "df['score'] = df['score']**3"
  },
  {
    "Input": "Calculate the cube of each value in the 'score' column.",
    "Output": "df['score'] = df['score']**3"
  },
  {
    "Input": "Find the cube of each entry in the 'score' column.",
    "Output": "df['score'] = df['score']**3"
  },
  {
    "Input": "Transform each element in the 'score' column by cubing it.",
    "Output": "df['score'] = df['score']**3"
  },
  {
    "Input": "Apply a cubing operation to each value in the 'score' column.",
    "Output": "df['score'] = df['score']**3"
  },
  {
    "Input": "Compute the cube of each score in the dataframe.",
    "Output": "df['score'] = df['score']**3"
  },
  {
    "Input": "Calculate the third power of each score in the dataframe.",
    "Output": "df['score'] = df['score']**3"
  },
  {
    "Input": "Elevate each 'score' value to the power of three.",
    "Output": "df['score'] = df['score']**3"
  },
  {
    "Input": "Perform a cubing operation on the 'score' column.",
    "Output": "df['score'] = df['score']**3"
  },
  {
    "Input": "Extract the month from the 'date' column.",
    "Output": "df['month'] = pd.to_datetime(df['date']).dt.month"
  },
  {
    "Input": "Get the month from the 'date' column.",
    "Output": "df['month'] = pd.to_datetime(df['date']).dt.month"
  },
  {
    "Input": "Retrieve the month values from the 'date' column.",
    "Output": "df['month'] = pd.to_datetime(df['date']).dt.month"
  },
  {
    "Input": "Isolate the month from the 'date' column.",
    "Output": "df['month'] = pd.to_datetime(df['date']).dt.month"
  },
  {
    "Input": "Pull out the month from the 'date' column.",
    "Output": "df['month'] = pd.to_datetime(df['date']).dt.month"
  },
  {
    "Input": "Create a new column called 'month' containing the month values from the 'date' column.",
    "Output": "df['month'] = pd.to_datetime(df['date']).dt.month"
  },
  {
    "Input": "Add a 'month' column to the dataframe, populated with the month values from the 'date' column.",
    "Output": "df['month'] = pd.to_datetime(df['date']).dt.month"
  },
  {
    "Input": "Derive the month from the 'date' column and store it in a new column called 'month'.",
    "Output": "df['month'] = pd.to_datetime(df['date']).dt.month"
  },
  {
    "Input": "Transform the 'date' column to extract the month and assign it to a new column called 'month'.",
    "Output": "df['month'] = pd.to_datetime(df['date']).dt.month"
  },
  {
    "Input": "Process the 'date' column to isolate the month and create a new column named 'month'.",
    "Output": "df['month'] = pd.to_datetime(df['date']).dt.month"
  },
  {
    "Input": "Extract the year from the 'date' column.",
    "Output": "df['year'] = pd.to_datetime(df['date']).dt.year"
  },
  {
    "Input": "Get the year from the 'date' column.",
    "Output": "df['year'] = pd.to_datetime(df['date']).dt.year"
  },
  {
    "Input": "Pull out the year from the 'date' column.",
    "Output": "df['year'] = pd.to_datetime(df['date']).dt.year"
  },
  {
    "Input": "Isolate the year from the 'date' column.",
    "Output": "df['year'] = pd.to_datetime(df['date']).dt.year"
  },
  {
    "Input": "Retrieve the year from the 'date' column.",
    "Output": "df['year'] = pd.to_datetime(df['date']).dt.year"
  },
  {
    "Input": "Select the year from the 'date' column.",
    "Output": "df['year'] = pd.to_datetime(df['date']).dt.year"
  },
  {
    "Input": "Extract the year part from the 'date' column.",
    "Output": "df['year'] = pd.to_datetime(df['date']).dt.year"
  },
  {
    "Input": "Create a new column called 'year' containing the year from the 'date' column.",
    "Output": "df['year'] = pd.to_datetime(df['date']).dt.year"
  },
  {
    "Input": "Add a 'year' column to the dataframe that extracts the year from the 'date' column.",
    "Output": "df['year'] = pd.to_datetime(df['date']).dt.year"
  },
  {
    "Input": "Derive the year from the 'date' column and store it in a new column.",
    "Output": "df['year'] = pd.to_datetime(df['date']).dt.year"
  },
  {
    "Input": "Get the day from the 'date' column.",
    "Output": "df['day'] = pd.to_datetime(df['date']).dt.day"
  },
  {
    "Input": "Retrieve the day value from the 'date' column.",
    "Output": "df['day'] = pd.to_datetime(df['date']).dt.day"
  },
  {
    "Input": "Extract the day component from the 'date' column.",
    "Output": "df['day'] = pd.to_datetime(df['date']).dt.day"
  },
  {
    "Input": "Isolate the day from the 'date' column.",
    "Output": "df['day'] = pd.to_datetime(df['date']).dt.day"
  },
  {
    "Input": "Pull out the day from the 'date' column.",
    "Output": "df['day'] = pd.to_datetime(df['date']).dt.day"
  },
  {
    "Input": "Separate the day from the 'date' column.",
    "Output": "df['day'] = pd.to_datetime(df['date']).dt.day"
  },
  {
    "Input": "Create a new column 'day' containing the day of the month from the 'date' column.",
    "Output": "df['day'] = pd.to_datetime(df['date']).dt.day"
  },
  {
    "Input": "Add a column 'day' to the dataframe, extracting the day from the 'date' column.",
    "Output": "df['day'] = pd.to_datetime(df['date']).dt.day"
  },
  {
    "Input": "Transform the 'date' column to extract only the day.",
    "Output": "df['day'] = pd.to_datetime(df['date']).dt.day"
  },
  {
    "Input": "Extract the numerical day value from the 'date' column.",
    "Output": "df['day'] = pd.to_datetime(df['date']).dt.day"
  },
  {
    "Input": "Normalize the 'sales' column.",
    "Output": "df['sales_normalized'] = (df['sales'] - df['sales'].min()) / (df['sales'].max() - df['sales'].min())"
  },
  {
    "Input": "Scale the 'sales' column to be between 0 and 1.",
    "Output": "df['sales_normalized'] = (df['sales'] - df['sales'].min()) / (df['sales'].max() - df['sales'].min())"
  },
  {
    "Input": "Rescale the 'sales' column using min-max scaling.",
    "Output": "df['sales_normalized'] = (df['sales'] - df['sales'].min()) / (df['sales'].max() - df['sales'].min())"
  },
  {
    "Input": "Perform min-max normalization on the 'sales' column.",
    "Output": "df['sales_normalized'] = (df['sales'] - df['sales'].min()) / (df['sales'].max() - df['sales'].min())"
  },
  {
    "Input": "Apply min-max normalization to the 'sales' column.",
    "Output": "df['sales_normalized'] = (df['sales'] - df['sales'].min()) / (df['sales'].max() - df['sales'].min())"
  },
  {
    "Input": "Standardize the 'sales' column between 0 and 1.",
    "Output": "df['sales_normalized'] = (df['sales'] - df['sales'].min()) / (df['sales'].max() - df['sales'].min())"
  },
  {
    "Input": "Transform the 'sales' column to range from 0 to 1.",
    "Output": "df['sales_normalized'] = (df['sales'] - df['sales'].min()) / (df['sales'].max() - df['sales'].min())"
  },
  {
    "Input": "Rescale the values in the 'sales' column to be between 0 and 1.",
    "Output": "df['sales_normalized'] = (df['sales'] - df['sales'].min()) / (df['sales'].max() - df['sales'].min())"
  },
  {
    "Input": "Adjust the 'sales' column to have a range of 0 to 1.",
    "Output": "df['sales_normalized'] = (df['sales'] - df['sales'].min()) / (df['sales'].max() - df['sales'].min())"
  },
  {
    "Input": "Create a new column called 'sales_normalized' with values normalized between 0 and 1.",
    "Output": "df['sales_normalized'] = (df['sales'] - df['sales'].min()) / (df['sales'].max() - df['sales'].min())"
  },
  {
    "Input": "Replace values in 'column' that exceed 100 with 100.",
    "Output": "df['column'] = df['column'].apply(lambda x: 100 if x > 100 else x)"
  },
  {
    "Input": "Cap values in 'column' at 100.",
    "Output": "df['column'] = df['column'].apply(lambda x: 100 if x > 100 else x)"
  },
  {
    "Input": "Set a maximum value of 100 for the 'column' column.",
    "Output": "df['column'] = df['column'].apply(lambda x: 100 if x > 100 else x)"
  },
  {
    "Input": "Clamp 'column' values to a maximum of 100.",
    "Output": "df['column'] = df['column'].apply(lambda x: 100 if x > 100 else x)"
  },
  {
    "Input": "Truncate 'column' values exceeding 100 to 100.",
    "Output": "df['column'] = df['column'].apply(lambda x: 100 if x > 100 else x)"
  },
  {
    "Input": "Limit 'column' values to a maximum of 100.",
    "Output": "df['column'] = df['column'].apply(lambda x: 100 if x > 100 else x)"
  },
  {
    "Input": "Ensure no values in 'column' are greater than 100.",
    "Output": "df['column'] = df['column'].apply(lambda x: 100 if x > 100 else x)"
  },
  {
    "Input": "For 'column', replace values above 100 with 100.",
    "Output": "df['column'] = df['column'].apply(lambda x: 100 if x > 100 else x)"
  },
  {
    "Input": "Apply a ceiling of 100 to the 'column' column.",
    "Output": "df['column'] = df['column'].apply(lambda x: 100 if x > 100 else x)"
  },
  {
    "Input": "Threshold 'column' values at 100.",
    "Output": "df['column'] = df['column'].apply(lambda x: 100 if x > 100 else x)"
  },
  {
    "Input": "Calculate the cumulative sum of the 'sales' column and store it in a new column called 'sales_cumsum'.",
    "Output": "df['sales_cumsum'] = df['sales'].cumsum()"
  },
  {
    "Input": "Generate a column named 'sales_cumsum' that represents the cumulative sum of the 'sales' column.",
    "Output": "df['sales_cumsum'] = df['sales'].cumsum()"
  },
  {
    "Input": "Add a cumulative sum column to the DataFrame called 'sales_cumsum' based on the 'sales' column.",
    "Output": "df['sales_cumsum'] = df['sales'].cumsum()"
  },
  {
    "Input": "Compute the running total of the 'sales' column and store it in a new column named 'sales_cumsum'.",
    "Output": "df['sales_cumsum'] = df['sales'].cumsum()"
  },
  {
    "Input": "Create a new column in the DataFrame called 'sales_cumsum' that contains the cumulative sum of the 'sales' column.",
    "Output": "df['sales_cumsum'] = df['sales'].cumsum()"
  },
  {
    "Input": "Obtain the cumulative sum of 'sales' and add it as a new column named 'sales_cumsum' to the DataFrame.",
    "Output": "df['sales_cumsum'] = df['sales'].cumsum()"
  },
  {
    "Input": "Generate a cumulative sum column for 'sales' with the name 'sales_cumsum'.",
    "Output": "df['sales_cumsum'] = df['sales'].cumsum()"
  },
  {
    "Input": "Compute the cumulative total of 'sales' and store it in a new column called 'sales_cumsum'.",
    "Output": "df['sales_cumsum'] = df['sales'].cumsum()"
  },
  {
    "Input": "Create a running total column for 'sales' and name it 'sales_cumsum'.",
    "Output": "df['sales_cumsum'] = df['sales'].cumsum()"
  },
  {
    "Input": "Add a column named 'sales_cumsum' to the DataFrame that represents the cumulative sum of the 'sales' values.",
    "Output": "df['sales_cumsum'] = df['sales'].cumsum()"
  },
  {
    "Input": "Convert the 'category' column into a categorical variable.",
    "Output": "df['category'] = pd.factorize(df['category'])[0]"
  },
  {
    "Input": "Transform the 'category' column to a categorical variable.",
    "Output": "df['category'] = pd.factorize(df['category'])[0]"
  },
  {
    "Input": "Encode the 'category' column as a categorical variable.",
    "Output": "df['category'] = pd.factorize(df['category'])[0]"
  },
  {
    "Input": "Treat the 'category' column as a categorical variable.",
    "Output": "df['category'] = pd.factorize(df['category'])[0]"
  },
  {
    "Input": "Represent the 'category' column as a categorical variable.",
    "Output": "df['category'] = pd.factorize(df['category'])[0]"
  },
  {
    "Input": "Change the 'category' column to a categorical variable.",
    "Output": "df['category'] = pd.factorize(df['category'])[0]"
  },
  {
    "Input": "Make the 'category' column categorical.",
    "Output": "df['category'] = pd.factorize(df['category'])[0]"
  },
  {
    "Input": "Create a categorical variable from the 'category' column.",
    "Output": "df['category'] = pd.factorize(df['category'])[0]"
  },
  {
    "Input": "Turn the 'category' column into a categorical variable.",
    "Output": "df['category'] = pd.factorize(df['category'])[0]"
  },
  {
    "Input": "Process the 'category' column as a categorical variable.",
    "Output": "df['category'] = pd.factorize(df['category'])[0]"
  },
  {
    "Input": "Create a column called 'total' that stores the product of 'price' and 'quantity' columns.",
    "Output": "df=df.eval('total = price * quantity')"
  },
  {
    "Input": "Calculate the total amount for each row by multiplying price and quantity, and add it as a new column named 'total'.",
    "Output": "df=df.eval('total = price * quantity')"
  },
  {
    "Input": "Compute the total cost for each item by multiplying the price with the quantity and store the result in a new column named 'total'.",
    "Output": "df=df.eval('total = price * quantity')"
  },
  {
    "Input": "Generate a 'total' column that represents the product of 'price' and 'quantity' columns.",
    "Output": "df=df.eval('total = price * quantity')"
  },
  {
    "Input": "Add a column named 'total' which contains the multiplication of 'price' and 'quantity' columns.",
    "Output": "df=df.eval('total = price * quantity')"
  },
  {
    "Input": "Introduce a new column called 'total' where each value is the product of the corresponding values in 'price' and 'quantity' columns.",
    "Output": "df=df.eval('total = price * quantity')"
  },
  {
    "Input": "Calculate the total value for each record by multiplying the 'price' and 'quantity' values and store it in a new column named 'total'.",
    "Output": "df=df.eval('total = price * quantity')"
  },
  {
    "Input": "Create a 'total' column by multiplying the 'price' column with the 'quantity' column.",
    "Output": "df=df.eval('total = price * quantity')"
  },
  {
    "Input": "Add a new column named 'total' where the value is calculated by multiplying the corresponding values in the 'price' and 'quantity' columns.",
    "Output": "df=df.eval('total = price * quantity')"
  },
  {
    "Input": "Compute the total value for each item and add it as a new column named 'total' by multiplying the 'price' and 'quantity' values.",
    "Output": "df=df.eval('total = price * quantity')"
  },
  {
    "Input": "Create a new 'total' column by adding the 'price' and 'quantity' columns.",
    "Output": "df=df.eval('total = price + quantity')"
  },
  {
    "Input": "Calculate the sum of 'price' and 'quantity' and store it in a new column called 'total'.",
    "Output": "df=df.eval('total = price + quantity')"
  },
  {
    "Input": "Generate a 'total' column that is the result of adding the 'price' column to the 'quantity' column.",
    "Output": "df=df.eval('total = price + quantity')"
  },
  {
    "Input": "Compute the total cost by adding the 'price' and 'quantity' columns and assign the result to a new column called 'total'.",
    "Output": "df=df.eval('total = price + quantity')"
  },
  {
    "Input": "Add the 'price' and 'quantity' columns together and create a new 'total' column with the sum.",
    "Output": "df=df.eval('total = price + quantity')"
  },
  {
    "Input": "Sum the 'price' and 'quantity' columns and store the sum in a new column named 'total'.",
    "Output": "df=df.eval('total = price + quantity')"
  },
  {
    "Input": "Combine the 'price' and 'quantity' columns to create a 'total' column containing their sum.",
    "Output": "df=df.eval('total = price + quantity')"
  },
  {
    "Input": "Create a column named 'total' that represents the sum of the 'price' and 'quantity' columns.",
    "Output": "df=df.eval('total = price + quantity')"
  },
  {
    "Input": "Calculate the total value by adding the 'price' and 'quantity' columns and store it in a new column called 'total'.",
    "Output": "df=df.eval('total = price + quantity')"
  },
  {
    "Input": "Perform the addition operation on the 'price' and 'quantity' columns and save the result in a new column called 'total'.",
    "Output": "df=df.eval('total = price + quantity')"
  },
  {
    "Input": "Create a new column 'total' that is the difference between 'price' and 'quantity'.",
    "Output": "df=df.eval('total = price - quantity')"
  },
  {
    "Input": "Calculate the difference between 'price' and 'quantity' and store it in a new column named 'total'.",
    "Output": "df=df.eval('total = price - quantity')"
  },
  {
    "Input": "Subtract 'quantity' from 'price' and assign the result to a new column called 'total'.",
    "Output": "df=df.eval('total = price - quantity')"
  },
  {
    "Input": "Compute the total value by subtracting 'quantity' from 'price' and add it as a new column 'total'.",
    "Output": "df=df.eval('total = price - quantity')"
  },
  {
    "Input": "Generate a new column 'total' representing the difference between the 'price' and 'quantity' columns.",
    "Output": "df=df.eval('total = price - quantity')"
  },
  {
    "Input": "Add a column named 'total' to the dataframe, where each value is calculated as 'price' minus 'quantity'.",
    "Output": "df=df.eval('total = price - quantity')"
  },
  {
    "Input": "Incorporate a column named 'total' that represents the result of subtracting 'quantity' from 'price'.",
    "Output": "df=df.eval('total = price - quantity')"
  },
  {
    "Input": "Insert a column named 'total' into the dataframe, calculated by subtracting the 'quantity' column from the 'price' column.",
    "Output": "df=df.eval('total = price - quantity')"
  },
  {
    "Input": "Construct a new column named 'total' by performing the subtraction of 'quantity' from 'price'.",
    "Output": "df=df.eval('total = price - quantity')"
  },
  {
    "Input": "Create a new column 'total' that holds the result of the subtraction of the 'quantity' column from the 'price' column.",
    "Output": "df=df.eval('total = price - quantity')"
  },
  {
    "Input": "Create a new column named 'total' that is the result of dividing the 'price' column by the 'quantity' column.",
    "Output": "df=df.eval('total = price / quantity')"
  },
  {
    "Input": "Calculate the total value for each row by dividing the price by the quantity and assign it to a new column 'total'.",
    "Output": "df=df.eval('total = price / quantity')"
  },
  {
    "Input": "Generate a 'total' column by performing element-wise division of the 'price' column by the 'quantity' column.",
    "Output": "df=df.eval('total = price / quantity')"
  },
  {
    "Input": "Compute the total amount for each item by dividing the price by the quantity and store it in a column named 'total'.",
    "Output": "df=df.eval('total = price / quantity')"
  },
  {
    "Input": "Add a column 'total' to the DataFrame that holds the calculated total value for each row, which is obtained by dividing the corresponding values in the 'price' and 'quantity' columns.",
    "Output": "df=df.eval('total = price / quantity')"
  },
  {
    "Input": "Introduce a new column 'total' to the DataFrame, representing the total value per row. This column is calculated by dividing the 'price' column by the 'quantity' column.",
    "Output": "df=df.eval('total = price / quantity')"
  },
  {
    "Input": "Incorporate a column named 'total' into the DataFrame, where the value for each row is determined by dividing the 'price' by the 'quantity' for that row.",
    "Output": "df=df.eval('total = price / quantity')"
  },
  {
    "Input": "Construct a column called 'total' in the DataFrame, which corresponds to the result of dividing the 'price' column by the respective 'quantity' values.",
    "Output": "df=df.eval('total = price / quantity')"
  },
  {
    "Input": "Append a column named 'total' to the DataFrame, representing the total value for each item. This column is derived by dividing the 'price' by the 'quantity' for each row.",
    "Output": "df=df.eval('total = price / quantity')"
  },
  {
    "Input": "Insert a new column labeled 'total' into the DataFrame, containing the values obtained by dividing the 'price' column by the corresponding entries in the 'quantity' column.",
    "Output": "df=df.eval('total = price / quantity')"
  },
  {
    "Input": "Create a new column named 'total' that is the product of the 'price' and 'quantity' columns.",
    "Output": "df=df.eval('total = price * quantity')"
  },
  {
    "Input": "Calculate the total amount for each row by multiplying the price and quantity and store it in a new column called 'total'.",
    "Output": "df=df.eval('total = price * quantity')"
  },
  {
    "Input": "Compute the total cost for each item by multiplying the price with the quantity and assign it to a new column named 'total'.",
    "Output": "df=df.eval('total = price * quantity')"
  },
  {
    "Input": "Generate a new column named 'total' that represents the product of the 'price' and 'quantity' columns.",
    "Output": "df=df.eval('total = price * quantity')"
  },
  {
    "Input": "Add a column called 'total' to the dataframe, where each value is the result of multiplying the corresponding values in the 'price' and 'quantity' columns.",
    "Output": "df=df.eval('total = price * quantity')"
  },
  {
    "Input": "Incorporate a new column called 'total' into the dataframe, which is obtained by multiplying the values in the 'price' and 'quantity' columns.",
    "Output": "df=df.eval('total = price * quantity')"
  },
  {
    "Input": "Introduce a new column called 'total' that contains the product of 'price' and 'quantity' for each row.",
    "Output": "df=df.eval('total = price * quantity')"
  },
  {
    "Input": "Construct a new column named 'total' that represents the result of multiplying the corresponding values in the 'price' and 'quantity' columns.",
    "Output": "df=df.eval('total = price * quantity')"
  },
  {
    "Input": "Populate a new column named 'total' with the product of the 'price' and 'quantity' columns.",
    "Output": "df=df.eval('total = price * quantity')"
  },
  {
    "Input": "Add a 'total' column to the dataframe, calculated by multiplying the values in the 'price' and 'quantity' columns.",
    "Output": "df=df.eval('total = price * quantity')"
  },
  {
    "Input": "Filter the DataFrame to keep only rows where the age is above 30.",
    "Output": "df = df[df['age'] > 30]"
  },
  {
    "Input": "Extract rows with an age exceeding 30.",
    "Output": "df = df[df['age'] > 30]"
  },
  {
    "Input": "Subset the DataFrame to include only individuals older than 30.",
    "Output": "df = df[df['age'] > 30]"
  },
  {
    "Input": "Keep only records with an age greater than 30.",
    "Output": "df = df[df['age'] > 30]"
  },
  {
    "Input": "Remove rows where the 'age' column is less than or equal to 30.",
    "Output": "df = df[df['age'] > 30]"
  },
  {
    "Input": "Select rows based on the condition that age is larger than 30.",
    "Output": "df = df[df['age'] > 30]"
  },
  {
    "Input": "Retrieve rows where the age value surpasses 30.",
    "Output": "df = df[df['age'] > 30]"
  },
  {
    "Input": "Isolate the rows with an age greater than 30.",
    "Output": "df = df[df['age'] > 30]"
  },
  {
    "Input": "Obtain the subset of the DataFrame where the age column value is above 30.",
    "Output": "df = df[df['age'] > 30]"
  },
  {
    "Input": "Filter the DataFrame based on the age column, keeping only those with values exceeding 30.",
    "Output": "df = df[df['age'] > 30]"
  },
  {
    "Input": "Filter the dataframe to include only rows where the 'city' column value is either 'New York' or 'Los Angeles'.",
    "Output": "df=df[df['city'].isin(['New York', 'Los Angeles'])]"
  },
  {
    "Input": "Keep only the rows in the dataframe that have 'city' values of 'New York' or 'Los Angeles'.",
    "Output": "df=df[df['city'].isin(['New York', 'Los Angeles'])]"
  },
  {
    "Input": "Select rows from the dataframe where 'city' is equal to 'New York' or 'Los Angeles'.",
    "Output": "df=df[df['city'].isin(['New York', 'Los Angeles'])]"
  },
  {
    "Input": "Remove all rows from the dataframe except those where 'city' is 'New York' or 'Los Angeles'.",
    "Output": "df=df[df['city'].isin(['New York', 'Los Angeles'])]"
  },
  {
    "Input": "Subset the dataframe to only include rows with 'city' values in the list ['New York', 'Los Angeles'].",
    "Output": "df=df[df['city'].isin(['New York', 'Los Angeles'])]"
  },
  {
    "Input": "Extract rows from the dataframe based on the condition that 'city' is either 'New York' or 'Los Angeles'.",
    "Output": "df=df[df['city'].isin(['New York', 'Los Angeles'])]"
  },
  {
    "Input": "Isolate the rows in the dataframe where the 'city' column contains 'New York' or 'Los Angeles'.",
    "Output": "df=df[df['city'].isin(['New York', 'Los Angeles'])]"
  },
  {
    "Input": "Create a new dataframe containing only the rows where 'city' is equal to 'New York' or 'Los Angeles'.",
    "Output": "df=df[df['city'].isin(['New York', 'Los Angeles'])]"
  },
  {
    "Input": "Restrict the dataframe to rows where the 'city' column matches 'New York' or 'Los Angeles'.",
    "Output": "df=df[df['city'].isin(['New York', 'Los Angeles'])]"
  },
  {
    "Input": "Eliminate rows in the dataframe where 'city' is not 'New York' or 'Los Angeles'.",
    "Output": "df=df[df['city'].isin(['New York', 'Los Angeles'])]"
  },
  {
    "Input": "Create a new column called 'total' by adding the 'price' and 'tax' columns.",
    "Output": "df['total'] = df['price'] + df['tax']"
  },
  {
    "Input": "Compute the sum of 'price' and 'tax' and assign it to a new column named 'total'.",
    "Output": "df['total'] = df['price'] + df['tax']"
  },
  {
    "Input": "Calculate the total cost by adding 'price' and 'tax' and store it in a column called 'total'.",
    "Output": "df['total'] = df['price'] + df['tax']"
  },
  {
    "Input": "Generate a new column called 'total' which represents the sum of 'price' and 'tax'.",
    "Output": "df['total'] = df['price'] + df['tax']"
  },
  {
    "Input": "Add up the values in 'price' and 'tax' and put the result in a new column called 'total'.",
    "Output": "df['total'] = df['price'] + df['tax']"
  },
  {
    "Input": "Combine the 'price' and 'tax' columns to create a new column named 'total'.",
    "Output": "df['total'] = df['price'] + df['tax']"
  },
  {
    "Input": "Create a column 'total' by summing the values in columns 'price' and 'tax'.",
    "Output": "df['total'] = df['price'] + df['tax']"
  },
  {
    "Input": "Calculate the total cost for each row by adding 'price' and 'tax', and put it in a column named 'total'.",
    "Output": "df['total'] = df['price'] + df['tax']"
  },
  {
    "Input": "Sum 'price' and 'tax' for each row and store the result in a new column named 'total'.",
    "Output": "df['total'] = df['price'] + df['tax']"
  },
  {
    "Input": "Add 'price' and 'tax' together for each row and put the result in a new column called 'total'",
    "Output": "df['total'] = df['price'] + df['tax']"
  },
  {
    "Input": "Increase the values in the 'price' column by 10%",
    "Output": "df['price'] = df['price']*1.1"
  },
  {
    "Input": "Apply a 10% markup to the 'price' column",
    "Output": "df['price'] = df['price']*1.1"
  },
  {
    "Input": "Add 10% to each price value in the dataframe",
    "Output": "df['price'] = df['price']*1.1"
  },
  {
    "Input": "Scale the 'price' column by a factor of 1.1",
    "Output": "df['price'] = df['price']*1.1"
  },
  {
    "Input": "Calculate a new 'price' column that is 10% higher than the original",
    "Output": "df['price'] = df['price']*1.1"
  },
  {
    "Input": "Adjust the 'price' column by multiplying each value by 1.1",
    "Output": "df['price'] = df['price']*1.1"
  },
  {
    "Input": "Enhance the 'price' column by applying a 10% increase",
    "Output": "df['price'] = df['price']*1.1"
  },
  {
    "Input": "Modify the 'price' column by adding 10% to each value",
    "Output": "df['price'] = df['price']*1.1"
  },
  {
    "Input": "Transform the 'price' column by multiplying by 1.1",
    "Output": "df['price'] = df['price']*1.1"
  },
  {
    "Input": "Update the 'price' column by adding 10% of the original value to each entry",
    "Output": "df['price'] = df['price']*1.1"
  },
  {
    "Input": "Replace values in 'category' column with 1 for 'A' and 2 for 'B'.",
    "Output": "df['category'] = df['category'].map({'A': 1, 'B': 2})"
  },
  {
    "Input": "Transform 'category' column by mapping 'A' to 1 and 'B' to 2.",
    "Output": "df['category'] = df['category'].map({'A': 1, 'B': 2})"
  },
  {
    "Input": "Apply a mapping to the 'category' column, converting 'A' to 1 and 'B' to 2.",
    "Output": "df['category'] = df['category'].map({'A': 1, 'B': 2})"
  },
  {
    "Input": "Change 'category' values to numerical representation, where 'A' is 1 and 'B' is 2.",
    "Output": "df['category'] = df['category'].map({'A': 1, 'B': 2})"
  },
  {
    "Input": "Encode 'category' values with 1 for 'A' and 2 for 'B'.",
    "Output": "df['category'] = df['category'].map({'A': 1, 'B': 2})"
  },
  {
    "Input": "Convert 'category' column to numerical values based on the mapping {'A': 1, 'B': 2}.",
    "Output": "df['category'] = df['category'].map({'A': 1, 'B': 2})"
  },
  {
    "Input": "Assign numerical codes to 'category' column, using 'A' as 1 and 'B' as 2.",
    "Output": "df['category'] = df['category'].map({'A': 1, 'B': 2})"
  },
  {
    "Input": "Recode 'category' values according to the mapping {'A': 1, 'B': 2}.",
    "Output": "df['category'] = df['category'].map({'A': 1, 'B': 2})"
  },
  {
    "Input": "Map 'category' column values based on the provided dictionary {'A': 1, 'B': 2}.",
    "Output": "df['category'] = df['category'].map({'A': 1, 'B': 2})"
  },
  {
    "Input": "Use the mapping {'A': 1, 'B': 2} to transform 'category' column values.",
    "Output": "df['category'] = df['category'].map({'A': 1, 'B': 2})"
  },
  {
    "Input": "Group the 'sales' column by 'month' and compute the sum for each group.",
    "Output": "df.groupby('month')['sales'].aggregate('sum')"
  },
  {
    "Input": "Calculate the total sales for each month.",
    "Output": "df.groupby('month')['sales'].aggregate('sum')"
  },
  {
    "Input": "Summarize the sales data by month.",
    "Output": "df.groupby('month')['sales'].aggregate('sum')"
  },
  {
    "Input": "Compute the monthly sales totals.",
    "Output": "df.groupby('month')['sales'].aggregate('sum')"
  },
  {
    "Input": "Aggregate the sales figures by month.",
    "Output": "df.groupby('month')['sales'].aggregate('sum')"
  },
  {
    "Input": "Find the sum of sales for each month.",
    "Output": "df.groupby('month')['sales'].aggregate('sum')"
  },
  {
    "Input": "Group the DataFrame by month and sum the 'sales' column.",
    "Output": "df.groupby('month')['sales'].aggregate('sum')"
  },
  {
    "Input": "Calculate the monthly sales figures.",
    "Output": "df.groupby('month')['sales'].aggregate('sum')"
  },
  {
    "Input": "Sum the 'sales' column for each month.",
    "Output": "df.groupby('month')['sales'].aggregate('sum')"
  },
  {
    "Input": "Get the monthly sales totals.",
    "Output": "df.groupby('month')['sales'].aggregate('sum')"
  },
  {
    "Input": "Center the sales column by subtracting its mean.",
    "Output": "df['sales'] = df['sales'].transform(lambda x: x - x.mean())"
  },
  {
    "Input": "Subtract the mean from all values in the 'sales' column.",
    "Output": "df['sales'] = df['sales'].transform(lambda x: x - x.mean())"
  },
  {
    "Input": "Calculate the mean of the 'sales' column and subtract it from each individual value.",
    "Output": "df['sales'] = df['sales'].transform(lambda x: x - x.mean())"
  },
  {
    "Input": "Apply a transformation to the 'sales' column that subtracts the mean from each value.",
    "Output": "df['sales'] = df['sales'].transform(lambda x: x - x.mean())"
  },
  {
    "Input": "Normalize the 'sales' column by subtracting its mean.",
    "Output": "df['sales'] = df['sales'].transform(lambda x: x - x.mean())"
  },
  {
    "Input": "De-mean the 'sales' column.",
    "Output": "df['sales'] = df['sales'].transform(lambda x: x - x.mean())"
  },
  {
    "Input": "Shift the 'sales' column by subtracting its mean.",
    "Output": "df['sales'] = df['sales'].transform(lambda x: x - x.mean())"
  },
  {
    "Input": "Center the distribution of the 'sales' column around zero by subtracting the mean.",
    "Output": "df['sales'] = df['sales'].transform(lambda x: x - x.mean())"
  },
  {
    "Input": "Perform a mean-centering operation on the 'sales' column.",
    "Output": "df['sales'] = df['sales'].transform(lambda x: x - x.mean())"
  },
  {
    "Input": "Adjust the 'sales' column by subtracting the mean value.",
    "Output": "df['sales'] = df['sales'].transform(lambda x: x - x.mean())"
  },
  {
    "Input": "Add a new column named 'discount' to the DataFrame and set all its values to 0.1",
    "Output": "df['discount']=0.1"
  },
  {
    "Input": "Create a column called 'discount' and fill it with the value 0.1",
    "Output": "df['discount']=0.1"
  },
  {
    "Input": "Introduce a new column called 'discount' with a constant value of 0.1",
    "Output": "df['discount']=0.1"
  },
  {
    "Input": "Generate a 'discount' column in the DataFrame, setting every entry to 0.1",
    "Output": "df['discount']=0.1"
  },
  {
    "Input": "Populate a new column named 'discount' with 0.1 for all rows",
    "Output": "df['discount']=0.1"
  },
  {
    "Input": "Incorporate a 'discount' column into the DataFrame with a value of 0.1 for each row",
    "Output": "df['discount']=0.1"
  },
  {
    "Input": "Insert a 'discount' column containing 0.1 for all records",
    "Output": "df['discount']=0.1"
  },
  {
    "Input": "Include a 'discount' column with a uniform value of 0.1",
    "Output": "df['discount']=0.1"
  },
  {
    "Input": "Append a 'discount' column and set the value to 0.1 across all entries",
    "Output": "df['discount']=0.1"
  },
  {
    "Input": "Construct a 'discount' column having a constant value of 0.1 throughout the DataFrame",
    "Output": "df['discount']=0.1"
  },
  {
    "Input": "Split the 'tags' column into individual rows.",
    "Output": "df = df.explode('tags')"
  },
  {
    "Input": "Transform the list elements in 'tags' into separate rows.",
    "Output": "df = df.explode('tags')"
  },
  {
    "Input": "Unpack the list entries from 'tags' into separate rows.",
    "Output": "df = df.explode('tags')"
  },
  {
    "Input": "Create a row for each element in the 'tags' column.",
    "Output": "df = df.explode('tags')"
  },
  {
    "Input": "Duplicate rows based on the elements in 'tags' column.",
    "Output": "df = df.explode('tags')"
  },
  {
    "Input": "Generate a new row for every item in the 'tags' list.",
    "Output": "df = df.explode('tags')"
  },
  {
    "Input": "Expand the 'tags' column to have one row per tag.",
    "Output": "df = df.explode('tags')"
  },
  {
    "Input": "Break down the 'tags' column into individual rows based on its list elements.",
    "Output": "df = df.explode('tags')"
  },
  {
    "Input": "Transform the 'tags' column into a series of rows, one for each tag.",
    "Output": "df = df.explode('tags')"
  },
  {
    "Input": "Convert the list entries in 'tags' column into separate rows.",
    "Output": "df = df.explode('tags')"
  },
  {
    "Input": "Map 'A' to 'Alpha', 'B' to 'Beta' in the 'category' column.",
    "Output": "df['category'].replace({'A': 'Alpha', 'B': 'Beta'}, inplace=True)"
  },
  {
    "Input": "Transform 'A' to 'Alpha' and 'B' to 'Beta' in 'category' column.",
    "Output": "df['category'].replace({'A': 'Alpha', 'B': 'Beta'}, inplace=True)"
  },
  {
    "Input": "Change 'A' to 'Alpha' and 'B' to 'Beta' within 'category' column.",
    "Output": "df['category'].replace({'A': 'Alpha', 'B': 'Beta'}, inplace=True)"
  },
  {
    "Input": "Update the 'category' column by replacing 'A' with 'Alpha' and 'B' with 'Beta'.",
    "Output": "df['category'].replace({'A': 'Alpha', 'B': 'Beta'}, inplace=True)"
  },
  {
    "Input": "Modify the 'category' column to substitute 'A' for 'Alpha', and 'B' for 'Beta'.",
    "Output": "df['category'].replace({'A': 'Alpha', 'B': 'Beta'}, inplace=True)"
  },
  {
    "Input": "Replace 'A' with 'Alpha', and 'B' with 'Beta' in the 'category' column.",
    "Output": "df['category'].replace({'A': 'Alpha', 'B': 'Beta'}, inplace=True)"
  },
  {
    "Input": "In the 'category' column, swap 'A' for 'Alpha' and 'B' for 'Beta'.",
    "Output": "df['category'].replace({'A': 'Alpha', 'B': 'Beta'}, inplace=True)"
  },
  {
    "Input": "Substitute 'Alpha' for 'A', and 'Beta' for 'B', in the 'category' column.",
    "Output": "df['category'].replace({'A': 'Alpha', 'B': 'Beta'}, inplace=True)"
  },
  {
    "Input": "Perform a replacement in the 'category' column, replacing 'A' with 'Alpha' and 'B' with 'Beta'.",
    "Output": "df['category'].replace({'A': 'Alpha', 'B': 'Beta'}, inplace=True)"
  },
  {
    "Input": "Convert 'A' to 'Alpha' and 'B' to 'Beta' in the 'category' column.",
    "Output": "df['category'].replace({'A': 'Alpha', 'B': 'Beta'}, inplace=True)"
  },
  {
    "Input": "Fill missing values with the previous value.",
    "Output": "df.ffill(inplace=True)"
  },
  {
    "Input": "Impute missing values using forward fill.",
    "Output": "df.ffill(inplace=True)"
  },
  {
    "Input": "Replace missing values with the value from the previous row.",
    "Output": "df.ffill(inplace=True)"
  },
  {
    "Input": "Propagate the last valid observation forward to fill missing values.",
    "Output": "df.ffill(inplace=True)"
  },
  {
    "Input": "Carry forward the last known value to replace missing entries.",
    "Output": "df.ffill(inplace=True)"
  },
  {
    "Input": "Use forward fill to handle missing data points.",
    "Output": "df.ffill(inplace=True)"
  },
  {
    "Input": "Fill in the gaps in the data with the values from the preceding row.",
    "Output": "df.ffill(inplace=True)"
  },
  {
    "Input": "Apply forward fill imputation to the dataframe.",
    "Output": "df.ffill(inplace=True)"
  },
  {
    "Input": "Fill missing values by copying the values from the previous row.",
    "Output": "df.ffill(inplace=True)"
  },
  {
    "Input": "Interpolate missing values using the previous value in the column.",
    "Output": "df.ffill(inplace=True)"
  },
  {
    "Input": "Fill in the gaps in the data.",
    "Output": "df.interpolate(inplace=True)"
  },
  {
    "Input": "Replace missing values with interpolated values.",
    "Output": "df.interpolate(inplace=True)"
  },
  {
    "Input": "Impute missing values using interpolation.",
    "Output": "df.interpolate(inplace=True)"
  },
  {
    "Input": "Handle missing values by interpolation.",
    "Output": "df.interpolate(inplace=True)"
  },
  {
    "Input": "Interpolate the data to fill in the missing entries.",
    "Output": "df.interpolate(inplace=True)"
  },
  {
    "Input": "Estimate missing values using interpolation.",
    "Output": "df.interpolate(inplace=True)"
  },
  {
    "Input": "Smooth the data by interpolating missing values.",
    "Output": "df.interpolate(inplace=True)"
  },
  {
    "Input": "Make the data continuous by filling in missing values with interpolation.",
    "Output": "df.interpolate(inplace=True)"
  },
  {
    "Input": "Fill in the blanks with interpolated values.",
    "Output": "df.interpolate(inplace=True)"
  },
  {
    "Input": "Use interpolation to replace missing data.",
    "Output": "df.interpolate(inplace=True)"
  },
  {
    "Input": "Replace missing values with zeros",
    "Output": "df.fillna(0, inplace=True)"
  },
  {
    "Input": "Fill in missing data with 0.",
    "Output": "df.fillna(0, inplace=True)"
  },
  {
    "Input": "Impute missing entries using zero",
    "Output": "df.fillna(0, inplace=True)"
  },
  {
    "Input": "Set all missing values to 0",
    "Output": "df.fillna(0, inplace=True)"
  },
  {
    "Input": "Handle missing values by replacing them with 0",
    "Output": "df.fillna(0, inplace=True)"
  },
  {
    "Input": "Replace all NaNs with zeros",
    "Output": "df.fillna(0, inplace=True)"
  },
  {
    "Input": "Fill empty cells with 0",
    "Output": "df.fillna(0, inplace=True)"
  },
  {
    "Input": "Replace null values with 0.",
    "Output": "df.fillna(0, inplace=True)"
  },
  {
    "Input": "Set all missing data points to zero",
    "Output": "df.fillna(0, inplace=True)"
  },
  {
    "Input": "Fill in missing data with a value of 0",
    "Output": "df.fillna(0, inplace=True)"
  },
  {
    "Input": "Fill in missing values using backfill method.",
    "Output": "df.bfill(inplace=True)"
  },
  {
    "Input": "Impute missing values using backfill strategy.",
    "Output": "df.bfill(inplace=True)"
  },
  {
    "Input": "Replace missing values with the values from the next row.",
    "Output": "df.bfill(inplace=True)"
  },
  {
    "Input": "Propagate the last valid observation forward to fill missing values.",
    "Output": "df.bfill(inplace=True)"
  },
  {
    "Input": "Backward fill missing data in the dataframe.",
    "Output": "df.bfill(inplace=True)"
  },
  {
    "Input": "Fill missing values by carrying the last non-null value forward.",
    "Output": "df.bfill(inplace=True)"
  },
  {
    "Input": "Apply the backfill method to handle missing values.",
    "Output": "df.bfill(inplace=True)"
  },
  {
    "Input": "Use backfill to interpolate missing values.",
    "Output": "df.bfill(inplace=True)"
  },
  {
    "Input": "Replace nulls with the previous non-null value using backfill.",
    "Output": "df.bfill(inplace=True)"
  },
  {
    "Input": "Fill in missing data using the backfill technique.",
    "Output": "df.bfill(inplace=True)"
  },
  {
    "Input": "Keep only the rows where 'age' is not missing.",
    "Output": "df = df[df['age'].notnull()]"
  },
  {
    "Input": "Remove rows where 'age' is null.",
    "Output": "df = df[df['age'].notnull()]"
  },
  {
    "Input": "Eliminate rows with missing values in the 'age' column.",
    "Output": "df = df[df['age'].notnull()]"
  },
  {
    "Input": "Select rows that have a valid age.",
    "Output": "df = df[df['age'].notnull()]"
  },
  {
    "Input": "Filter the data to exclude rows with missing age.",
    "Output": "df = df[df['age'].notnull()]"
  },
  {
    "Input": "Extract rows where the 'age' column has a value.",
    "Output": "df = df[df['age'].notnull()]"
  },
  {
    "Input": "Subset the dataframe to include only rows with non-null 'age'.",
    "Output": "df = df[df['age'].notnull()]"
  },
  {
    "Input": "Remove entries with missing age information.",
    "Output": "df = df[df['age'].notnull()]"
  },
  {
    "Input": "Get rid of rows with null values in the 'age' column.",
    "Output": "df = df[df['age'].notnull()]"
  },
  {
    "Input": "Keep only the rows where 'age' has a defined value.",
    "Output": "df = df[df['age'].notnull()]"
  },
  {
    "Input": "Divide the 'age' column of the dataframe 'df' into 5 equal-width bins and create a new column named 'age_group' to store the bin labels.",
    "Output": "df['age_group'] = pd.cut(df['age'], bins=5)"
  },
  {
    "Input": "Create a new column 'age_group' in 'df' by categorizing the 'age' column into 5 equal-width intervals.",
    "Output": "df['age_group'] = pd.cut(df['age'], bins=5)"
  },
  {
    "Input": "Bin the 'age' column of the dataframe 'df' into 5 equal-sized groups and store the resulting categories in a new column called 'age_group'.",
    "Output": "df['age_group'] = pd.cut(df['age'], bins=5)"
  },
  {
    "Input": "Discretize the 'age' column in 'df' into 5 equal-width bins and assign the bin labels to a new column named 'age_group'.",
    "Output": "df['age_group'] = pd.cut(df['age'], bins=5)"
  },
  {
    "Input": "Generate 5 equal-width bins for the 'age' column in 'df' and create a new column 'age_group' to store the bin assignments.",
    "Output": "df['age_group'] = pd.cut(df['age'], bins=5)"
  },
  {
    "Input": "Group the values in the 'age' column of 'df' into 5 equal-width intervals and create a new column 'age_group' to represent these groups.",
    "Output": "df['age_group'] = pd.cut(df['age'], bins=5)"
  },
  {
    "Input": "Create 5 equal-width bins for the 'age' column in 'df' and assign each value to its corresponding bin, storing the bin labels in a new column called 'age_group'.",
    "Output": "df['age_group'] = pd.cut(df['age'], bins=5)"
  },
  {
    "Input": "Transform the 'age' column in 'df' into 5 equal-width bins and store the resulting categories in a new column named 'age_group'.",
    "Output": "df['age_group'] = pd.cut(df['age'], bins=5)"
  },
  {
    "Input": "Categorize the 'age' column in 'df' into 5 equal-width groups and create a new column 'age_group' to store the group labels.",
    "Output": "df['age_group'] = pd.cut(df['age'], bins=5)"
  },
  {
    "Input": "Divide the 'age' column of the dataframe 'df' into 5 equal-sized ranges and assign each value to its corresponding range, storing the range labels in a new column named 'age_group'.",
    "Output": "df['age_group'] = pd.cut(df['age'], bins=5)"
  },
  {
    "Input": "Generate one-hot encoded features for the 'City' column.",
    "Output": "df = pd.get_dummies(df, columns=['City'], prefix='City')"
  },
  {
    "Input": "Transform the 'City' column into one-hot encoded variables.",
    "Output": "df = pd.get_dummies(df, columns=['City'], prefix='City')"
  },
  {
    "Input": "Perform one-hot encoding on the 'City' column.",
    "Output": "df = pd.get_dummies(df, columns=['City'], prefix='City')"
  },
  {
    "Input": "Apply one-hot encoding to the 'City' column.",
    "Output": "df = pd.get_dummies(df, columns=['City'], prefix='City')"
  },
  {
    "Input": "Convert the 'City' column into a one-hot encoded representation.",
    "Output": "df = pd.get_dummies(df, columns=['City'], prefix='City')"
  },
  {
    "Input": "Encode the 'City' column using one-hot encoding.",
    "Output": "df = pd.get_dummies(df, columns=['City'], prefix='City')"
  },
  {
    "Input": "Create dummy variables for the 'City' column.",
    "Output": "df = pd.get_dummies(df, columns=['City'], prefix='City')"
  },
  {
    "Input": "Represent the 'City' column as one-hot encoded features.",
    "Output": "df = pd.get_dummies(df, columns=['City'], prefix='City')"
  },
  {
    "Input": "Convert the 'City' column into a set of binary indicators using one-hot encoding.",
    "Output": "df = pd.get_dummies(df, columns=['City'], prefix='City')"
  },
  {
    "Input": "Use one-hot encoding to transform the 'City' column into a series of binary variables.",
    "Output": "df = pd.get_dummies(df, columns=['City'], prefix='City')"
  },
  {
    "Input": "Transform categorical columns into a one-hot encoded representation",
    "Output": "df = pd.get_dummies(df)"
  },
  {
    "Input": "Encode categorical variables using one-hot encoding",
    "Output": "df = pd.get_dummies(df)"
  },
  {
    "Input": "Apply one-hot encoding to categorical features",
    "Output": "df = pd.get_dummies(df)"
  },
  {
    "Input": "Convert categorical features into numerical using one-hot encoding",
    "Output": "df = pd.get_dummies(df)"
  },
  {
    "Input": "Perform one-hot encoding on categorical columns",
    "Output": "df = pd.get_dummies(df)"
  },
  {
    "Input": "Create dummy variables for categorical columns",
    "Output": "df = pd.get_dummies(df)"
  },
  {
    "Input": "Generate one-hot encoded columns for categorical variables",
    "Output": "df = pd.get_dummies(df)"
  },
  {
    "Input": "Represent categorical features with one-hot encoding",
    "Output": "df = pd.get_dummies(df)"
  },
  {
    "Input": "Convert categorical variables to numerical with one-hot encoding",
    "Output": "df = pd.get_dummies(df)"
  },
  {
    "Input": "Encode all categorical columns with one-hot encoding",
    "Output": "df = pd.get_dummies(df)"
  },
  {
    "Input": "Encode the 'color' column and store the encoded values in a new column called 'color_code'.",
    "Output": "df['color_code'] = pd.factorize(df['color'])[0]"
  },
  {
    "Input": "Create a new column 'color_code' by applying factorize to the 'color' column.",
    "Output": "df['color_code'] = pd.factorize(df['color'])[0]"
  },
  {
    "Input": "Transform the 'color' column into numerical values and save them in a new column named 'color_code'.",
    "Output": "df['color_code'] = pd.factorize(df['color'])[0]"
  },
  {
    "Input": "Apply factorize to the 'color' column and store the resulting codes in a new column called 'color_code'.",
    "Output": "df['color_code'] = pd.factorize(df['color'])[0]"
  },
  {
    "Input": "Encode the categorical 'color' column into numerical 'color_code'.",
    "Output": "df['color_code'] = pd.factorize(df['color'])[0]"
  },
  {
    "Input": "Convert the 'color' column to numerical values and assign them to a new column named 'color_code'.",
    "Output": "df['color_code'] = pd.factorize(df['color'])[0]"
  },
  {
    "Input": "Use factorize to encode the 'color' column and create a corresponding 'color_code' column.",
    "Output": "df['color_code'] = pd.factorize(df['color'])[0]"
  },
  {
    "Input": "Generate a new column 'color_code' by encoding the 'color' column.",
    "Output": "df['color_code'] = pd.factorize(df['color'])[0]"
  },
  {
    "Input": "Create a numerical representation of the 'color' column and store it in a new column called 'color_code'.",
    "Output": "df['color_code'] = pd.factorize(df['color'])[0]"
  },
  {
    "Input": "Perform factorize on the 'color' column and store the encoded values in a new column named 'color_code'.",
    "Output": "df['color_code'] = pd.factorize(df['color'])[0]"
  },
  {
    "Input": "Filter the dataframe to include only rows where column 'col1' has the value 'value1' and column 'col2' has a value greater than 'value2'.",
    "Output": "df.loc[(df['col1'] == 'value1') & (df['col2'] > 'value2')]"
  },
  {
    "Input": "Keep only the rows in the dataframe where 'col1' equals 'value1' and 'col2' is larger than 'value2'.",
    "Output": "df.loc[(df['col1'] == 'value1') & (df['col2'] > 'value2')]"
  },
  {
    "Input": "Subset the dataframe to include rows that meet the condition where 'col1' is 'value1' and 'col2' exceeds 'value2'.",
    "Output": "df.loc[(df['col1'] == 'value1') & (df['col2'] > 'value2')]"
  },
  {
    "Input": "Extract rows from the dataframe where 'col1' matches 'value1' and 'col2' is above 'value2'.",
    "Output": "df.loc[(df['col1'] == 'value1') & (df['col2'] > 'value2')]"
  },
  {
    "Input": "Isolate rows in the dataframe where 'col1' is equal to 'value1' and 'col2' is greater than 'value2'.",
    "Output": "df.loc[(df['col1'] == 'value1') & (df['col2'] > 'value2')]"
  },
  {
    "Input": "Retrieve rows from the dataframe based on the criteria that 'col1' is 'value1' and 'col2' is larger than 'value2'.",
    "Output": "df.loc[(df['col1'] == 'value1') & (df['col2'] > 'value2')]"
  },
  {
    "Input": "Select rows from the dataframe where 'col1' equals 'value1' and 'col2' is greater than 'value2'.",
    "Output": "df.loc[(df['col1'] == 'value1') & (df['col2'] > 'value2')]"
  },
  {
    "Input": "Filter the dataframe to only include rows where 'col1' is 'value1' and 'col2' is above 'value2'.",
    "Output": "df.loc[(df['col1'] == 'value1') & (df['col2'] > 'value2')]"
  },
  {
    "Input": "Keep the rows where 'col1' equals 'value1' and 'col2' is greater than 'value2' in the dataframe.",
    "Output": "df.loc[(df['col1'] == 'value1') & (df['col2'] > 'value2')]"
  },
  {
    "Input": "Subset the dataframe to include only rows where 'col1' is 'value1' and 'col2' exceeds 'value2'.",
    "Output": "df.loc[(df['col1'] == 'value1') & (df['col2'] > 'value2')]"
  },
  {
    "Input": "Filter the dataframe to retain rows where the 'column1' column has values from the list ['value1', 'value2', 'value3']",
    "Output": "df = df[df['column1'].isin(['value1', 'value2', 'value3'])]"
  },
  {
    "Input": "Select rows in the dataframe where the values in the 'column1' column are among 'value1', 'value2', and 'value3'",
    "Output": "df = df[df['column1'].isin(['value1', 'value2', 'value3'])]"
  },
  {
    "Input": "Subset the dataframe to include only rows whose 'column1' column contains 'value1', 'value2', or 'value3'",
    "Output": "df = df[df['column1'].isin(['value1', 'value2', 'value3'])]"
  },
  {
    "Input": "Extract rows from the dataframe that have 'value1', 'value2', or 'value3' in the 'column1' column",
    "Output": "df = df[df['column1'].isin(['value1', 'value2', 'value3'])]"
  },
  {
    "Input": "Restrict the dataframe to rows where the 'column1' column has values matching the list ['value1', 'value2', 'value3']",
    "Output": "df = df[df['column1'].isin(['value1', 'value2', 'value3'])]"
  },
  {
    "Input": "Keep only the rows in the dataframe whose 'column1' column value is present in the list ['value1', 'value2', 'value3']",
    "Output": "df = df[df['column1'].isin(['value1', 'value2', 'value3'])]"
  },
  {
    "Input": "Remove all rows from the dataframe that do not have 'value1', 'value2', or 'value3' in the 'column1' column",
    "Output": "df = df[df['column1'].isin(['value1', 'value2', 'value3'])]"
  },
  {
    "Input": "Filter the dataframe based on the 'column1' column, keeping only rows containing values 'value1', 'value2', and 'value3'",
    "Output": "df = df[df['column1'].isin(['value1', 'value2', 'value3'])]"
  },
  {
    "Input": "Select rows from the dataframe where the 'column1' column value is equal to 'value1', 'value2', or 'value3'",
    "Output": "df = df[df['column1'].isin(['value1', 'value2', 'value3'])]"
  },
  {
    "Input": "Create a new dataframe containing only the rows from the original dataframe where the 'column1' column value is in the list ['value1', 'value2', 'value3']",
    "Output": "df = df[df['column1'].isin(['value1', 'value2', 'value3'])]"
  },
  {
    "Input": "Select rows from the dataframe where the age is above 30.",
    "Output": "df = df.query('age > 30')"
  },
  {
    "Input": "Remove rows from the dataframe whose age is less than or equal to 30.",
    "Output": "df = df.query('age > 30')"
  },
  {
    "Input": "Keep only rows with age exceeding 30 in the dataframe.",
    "Output": "df = df.query('age > 30')"
  },
  {
    "Input": "Filter the dataframe by age, retaining rows with age greater than 30.",
    "Output": "df = df.query('age > 30')"
  },
  {
    "Input": "Subset the dataframe to include only individuals older than 30.",
    "Output": "df = df.query('age > 30')"
  },
  {
    "Input": "Isolate rows in the dataframe where the age column value is above 30.",
    "Output": "df = df.query('age > 30')"
  },
  {
    "Input": "Extract rows from the dataframe where the age surpasses 30.",
    "Output": "df = df.query('age > 30')"
  },
  {
    "Input": "Restrict the dataframe to only include entries where the age is greater than 30.",
    "Output": "df = df.query('age > 30')"
  },
  {
    "Input": "From the dataframe, eliminate all rows where the age is not greater than 30.",
    "Output": "df = df.query('age > 30')"
  },
  {
    "Input": "Retain only the rows in the dataframe that have an age exceeding 30.",
    "Output": "df = df.query('age > 30')"
  },
  {
    "Input": "In the dataframe, create a new column called 'C' by adding the corresponding values of the 'A' and 'B' columns.",
    "Output": "df['C'] = df['A'] + df['B']"
  },
  {
    "Input": "Compute the sum of 'A' and 'B' columns and store it in a new column named 'C'.",
    "Output": "df['C'] = df['A'] + df['B']"
  },
  {
    "Input": "Generate a new column 'C' by performing element-wise addition of 'A' and 'B' columns.",
    "Output": "df['C'] = df['A'] + df['B']"
  },
  {
    "Input": "Calculate the sum of 'A' and 'B' for each row and assign it to a new column called 'C'.",
    "Output": "df['C'] = df['A'] + df['B']"
  },
  {
    "Input": "Create a column 'C' that contains the sum of the values in columns 'A' and 'B'.",
    "Output": "df['C'] = df['A'] + df['B']"
  },
  {
    "Input": "Add up the values in columns 'A' and 'B' and store the results in a new column called 'C'.",
    "Output": "df['C'] = df['A'] + df['B']"
  },
  {
    "Input": "Sum the values of 'A' and 'B' columns row-wise and insert the sum into a new 'C' column.",
    "Output": "df['C'] = df['A'] + df['B']"
  },
  {
    "Input": "Construct a column 'C' by adding corresponding elements from columns 'A' and 'B'.",
    "Output": "df['C'] = df['A'] + df['B']"
  },
  {
    "Input": "Combine the values of columns 'A' and 'B' by adding them together and put the result in a new column named 'C'.",
    "Output": "df['C'] = df['A'] + df['B']"
  },
  {
    "Input": "Create a new column 'C' by adding the corresponding values from columns 'A' and 'B' together.",
    "Output": "df['C'] = df['A'] + df['B']"
  },
  {
    "Input": "Double the values in the 'A' column.",
    "Output": "df['A'] = df['A'] * 2"
  },
  {
    "Input": "Scale the 'A' column by a factor of 2.",
    "Output": "df['A'] = df['A'] * 2"
  },
  {
    "Input": "Increase all values in the 'A' column by 100%.",
    "Output": "df['A'] = df['A'] * 2"
  },
  {
    "Input": "Apply a multiplication operation to the 'A' column with a multiplier of 2.",
    "Output": "df['A'] = df['A'] * 2"
  },
  {
    "Input": "Transform the 'A' column by multiplying each value by 2.",
    "Output": "df['A'] = df['A'] * 2"
  },
  {
    "Input": "Compute the product of each value in the 'A' column and 2.",
    "Output": "df['A'] = df['A'] * 2"
  },
  {
    "Input": "Calculate twice the value for each entry in the 'A' column.",
    "Output": "df['A'] = df['A'] * 2"
  },
  {
    "Input": "Generate a new 'A' column where each value is double the original value.",
    "Output": "df['A'] = df['A'] * 2"
  },
  {
    "Input": "Update the 'A' column with its values multiplied by 2.",
    "Output": "df['A'] = df['A'] * 2"
  },
  {
    "Input": "Perform a pairwise multiplication between the 'A' column and 2.",
    "Output": "df['A'] = df['A'] * 2"
  },
  {
    "Input": "Create a new column named 'col2' by dividing the values in 'col1' by 2.",
    "Output": "df['col2'] = df['col1'] / 2"
  },
  {
    "Input": "Calculate the half of the values in 'col1' and store them in a new column 'col2'.",
    "Output": "df['col2'] = df['col1'] / 2"
  },
  {
    "Input": "Generate a column 'col2' containing the result of dividing each element in 'col1' by 2.",
    "Output": "df['col2'] = df['col1'] / 2"
  },
  {
    "Input": "Compute the quotient when dividing 'col1' by 2 and assign it to a new column called 'col2'.",
    "Output": "df['col2'] = df['col1'] / 2"
  },
  {
    "Input": "Transform the values in 'col1' by halving them and store the results in a new column 'col2'.",
    "Output": "df['col2'] = df['col1'] / 2"
  },
  {
    "Input": "Add a column named 'col2' to the dataframe, filled with the values from 'col1' divided by 2.",
    "Output": "df['col2'] = df['col1'] / 2"
  },
  {
    "Input": "Populate a new column 'col2' with the values of 'col1' divided by 2.",
    "Output": "df['col2'] = df['col1'] / 2"
  },
  {
    "Input": "Create a new column 'col2' by performing element-wise division of 'col1' by 2.",
    "Output": "df['col2'] = df['col1'] / 2"
  },
  {
    "Input": "Derive a new column 'col2' by dividing the corresponding values in 'col1' by 2.",
    "Output": "df['col2'] = df['col1'] / 2"
  },
  {
    "Input": "Calculate the ratio of 'col1' divided by 2 and store it in a new column 'col2'.",
    "Output": "df['col2'] = df['col1'] / 2"
  },
  {
    "Input": "Filter the DataFrame to keep only rows where column 'A' exceeds 5 and column 'B' is below 10.",
    "Output": "df[(df['A'] > 5) & (df['B'] < 10)]"
  },
  {
    "Input": "Extract rows from the DataFrame that satisfy both conditions: 'A' greater than 5 and 'B' less than 10.",
    "Output": "df[(df['A'] > 5) & (df['B'] < 10)]"
  },
  {
    "Input": "Subset the DataFrame by selecting rows where column 'A' is larger than 5 and column 'B' is smaller than 10.",
    "Output": "df[(df['A'] > 5) & (df['B'] < 10)]"
  },
  {
    "Input": "Keep only the rows in the DataFrame where column 'A' has values above 5 and column 'B' has values below 10.",
    "Output": "df[(df['A'] > 5) & (df['B'] < 10)]"
  },
  {
    "Input": "Obtain a subset of the DataFrame containing rows with column 'A' values greater than 5 and column 'B' values less than 10.",
    "Output": "df[(df['A'] > 5) & (df['B'] < 10)]"
  },
  {
    "Input": "From the DataFrame, select only the rows where column 'A' is greater than 5 and column 'B' is lower than 10.",
    "Output": "df[(df['A'] > 5) & (df['B'] < 10)]"
  },
  {
    "Input": "Get the rows in the DataFrame where column 'A' is above 5 and column 'B' is under 10.",
    "Output": "df[(df['A'] > 5) & (df['B'] < 10)]"
  },
  {
    "Input": "Retrieve the rows from the DataFrame that fulfill the criteria of 'A' being greater than 5 and 'B' being less than 10.",
    "Output": "df[(df['A'] > 5) & (df['B'] < 10)]"
  },
  {
    "Input": "Isolate the rows in the DataFrame where column 'A' has values exceeding 5 and column 'B' has values below 10.",
    "Output": "df[(df['A'] > 5) & (df['B'] < 10)]"
  },
  {
    "Input": "Create a new DataFrame containing only the rows from the original DataFrame where column 'A' is greater than 5 and column 'B' is less than 10.",
    "Output": "df[(df['A'] > 5) & (df['B'] < 10)]"
  },
  {
    "Input": "Combine the values of 'column1' and 'column2' using the 'or' operator and save the outcome in 'column3'.",
    "Output": "df['column3'] = df['column1'] | df['column2']"
  },
  {
    "Input": "Create a new column called 'column3' by performing a logical 'or' operation on 'column1' and 'column2'.",
    "Output": "df['column3'] = df['column1'] | df['column2']"
  },
  {
    "Input": "Use the 'or' operator to combine 'column1' and 'column2' and assign the result to 'column3'.",
    "Output": "df['column3'] = df['column1'] | df['column2']"
  },
  {
    "Input": "Apply a logical 'or' operation between 'column1' and 'column2' and store the result in a new column named 'column3'.",
    "Output": "df['column3'] = df['column1'] | df['column2']"
  },
  {
    "Input": "Perform a logical 'or' operation on the columns 'column1' and 'column2' and save the output in a column called 'column3'.",
    "Output": "df['column3'] = df['column1'] | df['column2']"
  },
  {
    "Input": "Combine the columns 'column1' and 'column2' using a logical 'or' operation and store the result in 'column3'.",
    "Output": "df['column3'] = df['column1'] | df['column2']"
  },
  {
    "Input": "Create a column named 'column3' by applying the 'or' operator to the values in 'column1' and 'column2'.",
    "Output": "df['column3'] = df['column1'] | df['column2']"
  },
  {
    "Input": "Use the 'or' operator to combine the corresponding values in 'column1' and 'column2' and save the result in a new column 'column3'.",
    "Output": "df['column3'] = df['column1'] | df['column2']"
  },
  {
    "Input": "Compute the logical 'or' of 'column1' and 'column2' and store the result in a column called 'column3'.",
    "Output": "df['column3'] = df['column1'] | df['column2']"
  },
  {
    "Input": "Create a new column 'column3' that contains the result of applying the 'or' operation to 'column1' and 'column2'.",
    "Output": "df['column3'] = df['column1'] | df['column2']"
  },
  {
    "Input": "Filter the dataset to include only rows where the 'Age' column is not equal to 25.",
    "Output": "df = df[df['Age'] != 25]"
  },
  {
    "Input": "Remove rows from the dataset where the 'Age' column has a value of 25.",
    "Output": "df = df[df['Age'] != 25]"
  },
  {
    "Input": "Keep only rows in the dataset where the 'Age' column does not have a value of 25.",
    "Output": "df = df[df['Age'] != 25]"
  },
  {
    "Input": "Select rows in the dataset where the 'Age' column is different from 25.",
    "Output": "df = df[df['Age'] != 25]"
  },
  {
    "Input": "Exclude rows from the dataset that have an 'Age' value of 25.",
    "Output": "df = df[df['Age'] != 25]"
  },
  {
    "Input": "Subset the dataset to include rows with 'Age' values other than 25.",
    "Output": "df = df[df['Age'] != 25]"
  },
  {
    "Input": "I want to remove all rows where the 'Age' column has a value of 25.",
    "Output": "df = df[df['Age'] != 25]"
  },
  {
    "Input": "I want to keep rows that do not have an 'Age' value of 25.",
    "Output": "df = df[df['Age'] != 25]"
  },
  {
    "Input": "I need to filter the dataset to exclude rows with an 'Age' of 25.",
    "Output": "df = df[df['Age'] != 25]"
  },
  {
    "Input": "Filter the dataframe to include only those rows where the 'Age' column is not equal to 25.",
    "Output": "df = df[df['Age'] != 25]"
  },
  {
    "Input": "Combine columns 'A' and 'B' from the dataset using addition, placing the result in a new column called 'C'.",
    "Output": "df['C'] = df['A'] + df['B']"
  },
  {
    "Input": "Create a new column 'C' by adding the values in columns 'A' and 'B'.",
    "Output": "df['C'] = df['A'] + df['B']"
  },
  {
    "Input": "Sum the values of columns 'A' and 'B' and store the sum in a new column named 'C'.",
    "Output": "df['C'] = df['A'] + df['B']"
  },
  {
    "Input": "Add column 'A' to column 'B' and assign the result to a new column called 'C'.",
    "Output": "df['C'] = df['A'] + df['B']"
  },
  {
    "Input": "Generate a column 'C' by adding the corresponding elements of columns 'A' and 'B'.",
    "Output": "df['C'] = df['A'] + df['B']"
  },
  {
    "Input": "Calculate the sum of columns 'A' and 'B' and store it in a new column named 'C'.",
    "Output": "df['C'] = df['A'] + df['B']"
  },
  {
    "Input": "Create a new column 'C' by performing element-wise addition on columns 'A' and 'B'.",
    "Output": "df['C'] = df['A'] + df['B']"
  },
  {
    "Input": "Add together the values in columns 'A' and 'B' and put the result in a column named 'C'.",
    "Output": "df['C'] = df['A'] + df['B']"
  },
  {
    "Input": "Concatenate the values in columns 'A' and 'B' using addition, naming the new column 'C'.",
    "Output": "df['C'] = df['A'] + df['B']"
  },
  {
    "Input": "Merge the columns 'A' and 'B' using addition, storing the result in a new column called 'C'.",
    "Output": "df['C'] = df['A'] + df['B']"
  },
  {
    "Input": "Square each element in the 'column1' column.",
    "Output": "df['column1_squared'] = df.apply(lambda row: row['column1'] ** 2, axis=1)"
  },
  {
    "Input": "Compute the squares of the values in the 'column1' column.",
    "Output": "df['column1_squared'] = df.apply(lambda row: row['column1'] ** 2, axis=1)"
  },
  {
    "Input": "Generate a new column named 'column1_squared' with the squares of the values in 'column1'.",
    "Output": "df['column1_squared'] = df.apply(lambda row: row['column1'] ** 2, axis=1)"
  },
  {
    "Input": "Add a new column 'column1_squared' containing the squared values from 'column1'.",
    "Output": "df['column1_squared'] = df.apply(lambda row: row['column1'] ** 2, axis=1)"
  },
  {
    "Input": "Create a column named 'column1_squared' holding the squares of the data in 'column1'.",
    "Output": "df['column1_squared'] = df.apply(lambda row: row['column1'] ** 2, axis=1)"
  },
  {
    "Input": "Calculate the square of each value in the 'column1' column and store the results in a new column named 'column1_squared'.",
    "Output": "df['column1_squared'] = df.apply(lambda row: row['column1'] ** 2, axis=1)"
  },
  {
    "Input": "Square each entry in the 'column1' column and append the results to a new column 'column1_squared'.",
    "Output": "df['column1_squared'] = df.apply(lambda row: row['column1'] ** 2, axis=1)"
  },
  {
    "Input": "For every value in the 'column1' column, calculate its square and store it in a new column named 'column1_squared'.",
    "Output": "df['column1_squared'] = df.apply(lambda row: row['column1'] ** 2, axis=1)"
  },
  {
    "Input": "Transform the data in the 'column1' column by squaring each value and storing the result in a new column named 'column1_squared'.",
    "Output": "df['column1_squared'] = df.apply(lambda row: row['column1'] ** 2, axis=1)"
  },
  {
    "Input": "Obtain the squared values of the 'column1' column and add them to the dataframe as a new column called 'column1_squared'.",
    "Output": "df['column1_squared'] = df.apply(lambda row: row['column1'] ** 2, axis=1)"
  },

  {
    "Input": "Transform the 'price' column by taking its logarithm.",
    "Output": "df['price'] = np.log(df['price'])"
  },
  {
    "Input": "Calculate the natural logarithm of the 'price' column and store it back in the same column.",
    "Output": "df['price'] = np.log(df['price'])"
  },
  {
    "Input": "Log-transform the 'price' column.",
    "Output": "df['price'] = np.log(df['price'])"
  },
  {
    "Input": "Apply a logarithmic transformation to the 'price' column.",
    "Output": "df['price'] = np.log(df['price'])"
  },
  {
    "Input": "Perform a log transformation on the 'price' column.",
    "Output": "df['price'] = np.log(df['price'])"
  },
  {
    "Input": "Take the natural logarithm of each value in the 'price' column.",
    "Output": "df['price'] = np.log(df['price'])"
  },
  {
    "Input": "Compute the logarithm of the 'price' column.",
    "Output": "df['price'] = np.log(df['price'])"
  },
  {
    "Input": "Logarithmically transform the 'price' column.",
    "Output": "df['price'] = np.log(df['price'])"
  },
  {
    "Input": "Replace the 'price' column with its logarithmic values.",
    "Output": "df['price'] = np.log(df['price'])"
  },
  {
    "Input": "Transform the 'price' column to its logarithmic equivalent.",
    "Output": "df['price'] = np.log(df['price'])"
  },
  {
    "Input": "Add a new column called 'squared_value' to the dataframe, with each entry being the square of the corresponding value in the 'value' column.",
    "Output": "df = df.assign(squared_value=df['value'] ** 2)"
  },
  {
    "Input": "Compute the squares of the values in the 'value' column and store them in a new column named 'squared_value'.",
    "Output": "df = df.assign(squared_value=df['value'] ** 2)"
  },
  {
    "Input": "Calculate the square of each value in the 'value' column and create a new column called 'squared_value' to hold the results.",
    "Output": "df = df.assign(squared_value=df['value'] ** 2)"
  },
  {
    "Input": "Generate a new column called 'squared_value' by squaring the values in the 'value' column.",
    "Output": "df = df.assign(squared_value=df['value'] ** 2)"
  },
  {
    "Input": "Create a column 'squared_value' in the dataframe where each element is the square of the corresponding element in the 'value' column.",
    "Output": "df = df.assign(squared_value=df['value'] ** 2)"
  },
  {
    "Input": "Add a column named 'squared_value' to the dataframe, populated with the squares of the values in the 'value' column.",
    "Output": "df = df.assign(squared_value=df['value'] ** 2)"
  },
  {
    "Input": "Insert a new column called 'squared_value', containing the squares of the values in the 'value' column.",
    "Output": "df = df.assign(squared_value=df['value'] ** 2)"
  },
  {
    "Input": "Introduce a column named 'squared_value' in the dataframe, where each cell is the square of the corresponding cell in the 'value' column.",
    "Output": "df = df.assign(squared_value=df['value'] ** 2)"
  },
  {
    "Input": "Create a new column called 'squared_value', which should contain the square of each corresponding value in the 'value' column.",
    "Output": "df = df.assign(squared_value=df['value'] ** 2)"
  },
  {
    "Input": "Construct a new column named 'squared_value', filled with the squared values of the 'value' column.",
    "Output": "df = df.assign(squared_value=df['value'] ** 2)"
  },
  {
    "Input": "Explode the 'items' column in the DataFrame, where each item in the list becomes a separate row.",
    "Output": "df = df.explode('items')"
  },
  {
    "Input": "Unpack the lists within the 'items' column into individual rows.",
    "Output": "df = df.explode('items')"
  },
  {
    "Input": "Transform the DataFrame by converting each list element in the 'items' column into a new row.",
    "Output": "df = df.explode('items')"
  },
  {
    "Input": "Separate the elements of the lists in the 'items' column and create a new row for each element.",
    "Output": "df = df.explode('items')"
  },
  {
    "Input": "Create a new row for each item in the lists contained within the 'items' column.",
    "Output": "df = df.explode('items')"
  },
  {
    "Input": "Split the 'items' column into separate rows based on the elements within the lists.",
    "Output": "df = df.explode('items')"
  },
  {
    "Input": "Flatten the lists in the 'items' column into individual rows in the DataFrame.",
    "Output": "df = df.explode('items')"
  },
  {
    "Input": "Expand the 'items' column by distributing each list element into its own row.",
    "Output": "df = df.explode('items')"
  },
  {
    "Input": "Transform the 'items' column so that each list element occupies a separate row in the DataFrame.",
    "Output": "df = df.explode('items')"
  },
  {
    "Input": "Break down the 'items' column into individual rows, where each row represents an element from the lists.",
    "Output": "df = df.explode('items')"
  },
  {
    "Input": "Replace all zero values in the 'Price' column with 'Missing'.",
    "Output": "df['Price'] = df['Price'].replace(0, 'Missing')"
  },
  {
    "Input": "Change all zeros in the 'Price' column to 'Missing'.",
    "Output": "df['Price'] = df['Price'].replace(0, 'Missing')"
  },
  {
    "Input": "Set all values in the 'Price' column that are 0 to 'Missing'.",
    "Output": "df['Price'] = df['Price'].replace(0, 'Missing')"
  },
  {
    "Input": "Transform all 0 values in the 'Price' column into 'Missing'.",
    "Output": "df['Price'] = df['Price'].replace(0, 'Missing')"
  },
  {
    "Input": "Modify the 'Price' column by replacing 0s with 'Missing'.",
    "Output": "df['Price'] = df['Price'].replace(0, 'Missing')"
  },
  {
    "Input": "Substitute 'Missing' for all 0s in the 'Price' column.",
    "Output": "df['Price'] = df['Price'].replace(0, 'Missing')"
  },
  {
    "Input": "For all entries in the 'Price' column, replace 0 with 'Missing'.",
    "Output": "df['Price'] = df['Price'].replace(0, 'Missing')"
  },
  {
    "Input": "In the 'Price' column, replace every instance of 0 with 'Missing'.",
    "Output": "df['Price'] = df['Price'].replace(0, 'Missing')"
  },
  {
    "Input": "Update the 'Price' column by setting all 0 values to 'Missing'.",
    "Output": "df['Price'] = df['Price'].replace(0, 'Missing')"
  },
  {
    "Input": "Convert all 0s in the 'Price' column to the string 'Missing'.",
    "Output": "df['Price'] = df['Price'].replace(0, 'Missing')"
  },
  {
    "Input": "Filter the dataframe to include only rows with 'Age' values exceeding 30.",
    "Output": "df.filter(items=['Age'], axis=0).query('Age > 30')"
  },
  {
    "Input": "Select rows from the dataframe where the 'Age' column is greater than 30.",
    "Output": "df.filter(items=['Age'], axis=0).query('Age > 30')"
  },
  {
    "Input": "Remove all rows from the dataset where 'Age' is less than or equal to 30.",
    "Output": "df.filter(items=['Age'], axis=0).query('Age > 30')"
  },
  {
    "Input": "Subset the dataframe to contain only rows whose 'Age' values are above 30.",
    "Output": "df.filter(items=['Age'], axis=0).query('Age > 30')"
  },
  {
    "Input": "Keep only the entries in the dataframe where the 'Age' column is greater than 30.",
    "Output": "df.filter(items=['Age'], axis=0).query('Age > 30')"
  },
  {
    "Input": "Extract the rows from the dataframe that have an 'Age' value greater than 30.",
    "Output": "df.filter(items=['Age'], axis=0).query('Age > 30')"
  },
  {
    "Input": "Isolate the rows in the dataframe where the 'Age' column is above 30.",
    "Output": "df.filter(items=['Age'], axis=0).query('Age > 30')"
  },
  {
    "Input": "Restrict the dataframe to rows with 'Age' values exceeding 30.",
    "Output": "df.filter(items=['Age'], axis=0).query('Age > 30')"
  },
  {
    "Input": "Create a new dataframe containing only rows where the 'Age' column is greater than 30.",
    "Output": "df.filter(items=['Age'], axis=0).query('Age > 30')"
  },
  {
    "Input": "Filter out rows from the dataframe where the 'Age' column is less than or equal to 30.",
    "Output": "df.filter(items=['Age'], axis=0).query('Age > 30')"
  },
  {
    "Input": "Split the 'days' column values into separate columns based on spaces.",
    "Output": "split_df=df['days'].str.split(' ',expand=True)\nsplit_df.columns=['days'+'_'+str(i) for i in range(split_df.shape[1])]\ndf=pd.concat([df,split_df],axis=1)"
  },
  {
    "Input": "Separate the elements in 'days' column by space and create new columns.",
    "Output": "split_df=df['days'].str.split(' ',expand=True)\nsplit_df.columns=['days'+'_'+str(i) for i in range(split_df.shape[1])]\ndf=pd.concat([df,split_df],axis=1)"
  },
  {
    "Input": "Transform the 'days' column by splitting its values using space as the delimiter.",
    "Output": "split_df=df['days'].str.split(' ',expand=True)\nsplit_df.columns=['days'+'_'+str(i) for i in range(split_df.shape[1])]\ndf=pd.concat([df,split_df],axis=1)"
  },
  {
    "Input": "Create new columns for each element in the 'days' column, separated by spaces.",
    "Output": "split_df=df['days'].str.split(' ',expand=True)\nsplit_df.columns=['days'+'_'+str(i) for i in range(split_df.shape[1])]\ndf=pd.concat([df,split_df],axis=1)"
  },
  {
    "Input": "Extract elements from the 'days' column based on space separation and add them as new columns.",
    "Output": "split_df=df['days'].str.split(' ',expand=True)\nsplit_df.columns=['days'+'_'+str(i) for i in range(split_df.shape[1])]\ndf=pd.concat([df,split_df],axis=1)"
  },
  {
    "Input": "Break down the 'days' column values into individual components using spaces as delimiters.",
    "Output": "split_df=df['days'].str.split(' ',expand=True)\nsplit_df.columns=['days'+'_'+str(i) for i in range(split_df.shape[1])]\ndf=pd.concat([df,split_df],axis=1)"
  },
  {
    "Input": "Generate separate columns for each space-separated element in the 'days' column.",
    "Output": "split_df=df['days'].str.split(' ',expand=True)\nsplit_df.columns=['days'+'_'+str(i) for i in range(split_df.shape[1])]\ndf=pd.concat([df,split_df],axis=1)"
  },
  {
    "Input": "Expand the 'days' column into multiple columns based on space separation.",
    "Output": "split_df=df['days'].str.split(' ',expand=True)\nsplit_df.columns=['days'+'_'+str(i) for i in range(split_df.shape[1])]\ndf=pd.concat([df,split_df],axis=1)"
  },
  {
    "Input": "Add new columns by splitting the values in 'days' column around spaces.",
    "Output": "split_df=df['days'].str.split(' ',expand=True)\nsplit_df.columns=['days'+'_'+str(i) for i in range(split_df.shape[1])]\ndf=pd.concat([df,split_df],axis=1)"
  },
  {
    "Input": "Divide the 'days' column values into multiple columns based on space delimiters.",
    "Output": "split_df=df['days'].str.split(' ',expand=True)\nsplit_df.columns=['days'+'_'+str(i) for i in range(split_df.shape[1])]\ndf=pd.concat([df,split_df],axis=1)"
  },
  {
    "Input": "Add a new column to the DataFrame called 'name_id' by combining the 'name' and 'id' columns, with values separated by a space.",
    "Output": "join_df=pd.Series(df.agg(lambda x: f'''{x['name']} {x['id']}''',axis=1),name='name_id')\ndf=pd.concat([df,join_df],axis=1)"
  },
  {
    "Input": "Combine the contents of 'name' and 'id' columns and store the result in a new column named 'name_id'.",
    "Output": "join_df=pd.Series(df.agg(lambda x: f'''{x['name']}{x['id']}''',axis=1),name='name_id')\ndf=pd.concat([df,join_df],axis=1)"
  },
  {
    "Input": "Create a column named 'name_id' that contains the concatenated values from the 'name' and 'id' columns.",
    "Output": "join_df=pd.Series(df.agg(lambda x: f'''{x['name']}{x['id']}''',axis=1),name='name_id')\ndf=pd.concat([df,join_df],axis=1)"
  },
  {
    "Input": "Concatenate the 'name' and 'id' column values and assign them to a new column called 'name_id'.",
    "Output": "join_df=pd.Series(df.agg(lambda x: f'''{x['name']}{x['id']}''',axis=1),name='name_id')\ndf=pd.concat([df,join_df],axis=1)"
  },
  {
    "Input": "Generate a new column called 'name_id' by merging the 'name' and 'id' column values.",
    "Output": "join_df=pd.Series(df.agg(lambda x: f'''{x['name']}{x['id']}''',axis=1),name='name_id')\ndf=pd.concat([df,join_df],axis=1)"
  },
  {
    "Input": "Append a column named 'name_id' that contains the joined values from 'name' and 'id'.",
    "Output": "join_df=pd.Series(df.agg(lambda x: f'''{x['name']}{x['id']}''',axis=1),name='name_id')\ndf=pd.concat([df,join_df],axis=1)"
  },
  {
    "Input": "Incorporate a new column called 'name_id' by combining the 'name' and 'id' columns into a single string.",
    "Output": "join_df=pd.Series(df.agg(lambda x: f'''{x['name']}{x['id']}''',axis=1),name='name_id')\ndf=pd.concat([df,join_df],axis=1)"
  },
  {
    "Input": "Produce a new column named 'name_id' by joining the 'name' and 'id' columns side-by-side.",
    "Output": "join_df=pd.Series(df.agg(lambda x: f'''{x['name']}{x['id']}''',axis=1),name='name_id')\ndf=pd.concat([df,join_df],axis=1)"
  },
  {
    "Input": "Introduce a new column called 'name_id' to hold the combined string values from 'name' and 'id' columns.",
    "Output": "join_df=pd.Series(df.agg(lambda x: f'''{x['name']}{x['id']}''',axis=1),name='name_id')\ndf=pd.concat([df,join_df],axis=1)"
  },
  {
    "Input": "Compose a new column named 'name_id' by merging the 'name' and 'id' columns into a single string.",
    "Output": "join_df=pd.Series(df.agg(lambda x: f'''{x['name']}{x['id']}''',axis=1),name='name_id')\ndf=pd.concat([df,join_df],axis=1)"
  },
  {
    "Input": "Normalize the 'Height' column using standardization.",
    "Output": "scaler = StandardScaler()\ndf['Height_standardized'] = scaler.fit_transform(df[['Height']])"
  },
  {
    "Input": "Scale the 'Height' column to have zero mean and unit variance.",
    "Output": "scaler = StandardScaler()\ndf['Height_standardized'] = scaler.fit_transform(df[['Height']])"
  },
  {
    "Input": "Transform the 'Height' column using standardization.",
    "Output": "scaler = StandardScaler()\ndf['Height_standardized'] = scaler.fit_transform(df[['Height']])"
  },
  {
    "Input": "Apply standardization to the 'Height' column.",
    "Output": "scaler = StandardScaler()\ndf['Height_standardized'] = scaler.fit_transform(df[['Height']])"
  },
  {
    "Input": "Center and scale the 'Height' column.",
    "Output": "scaler = StandardScaler()\ndf['Height_standardized'] = scaler.fit_transform(df[['Height']])"
  },
  {
    "Input": "Standardize the 'Height' column values.",
    "Output": "scaler = StandardScaler()\ndf['Height_standardized'] = scaler.fit_transform(df[['Height']])"
  },
  {
    "Input": "Rescale the 'Height' column using standardization.",
    "Output": "scaler = StandardScaler()\ndf['Height_standardized'] = scaler.fit_transform(df[['Height']])"
  },
  {
    "Input": "Process the 'Height' column with standardization.",
    "Output": "scaler = StandardScaler()\ndf['Height_standardized'] = scaler.fit_transform(df[['Height']])"
  },
  {
    "Input": "Apply a standardization transformation to the 'Height' column.",
    "Output": "scaler = StandardScaler()\ndf['Height_standardized'] = scaler.fit_transform(df[['Height']])"
  },
  {
    "Input": "Perform standardization on the 'Height' column.",
    "Output": "scaler = StandardScaler()\ndf['Height_standardized'] = scaler.fit_transform(df[['Height']])"
  },
  {
    "Input": "Normalize the 'Height' column by dividing each value by the maximum value.",
    "Output": "scaler = MaxAbsScaler()\ndf['Height_scale'] = scaler.fit_transform(df[['Height']])"
  },
  {
    "Input": "Rescale the 'Height' column to a range between 0 and 1 using the maximum value.",
    "Output": "scaler = MaxAbsScaler()\ndf['Height_scale'] = scaler.fit_transform(df[['Height']])"
  },
  {
    "Input": "Transform the 'Height' column by dividing each value by the maximum height.",
    "Output": "scaler = MaxAbsScaler()\ndf['Height_scale'] = scaler.fit_transform(df[['Height']])"
  },
  {
    "Input": "Apply a max-absolute scaler to the 'Height' column.",
    "Output": "scaler = MaxAbsScaler()\ndf['Height_scale'] = scaler.fit_transform(df[['Height']])"
  },
  {
    "Input": "Scale the 'Height' column to have a maximum value of 1.",
    "Output": "scaler = MaxAbsScaler()\ndf['Height_scale'] = scaler.fit_transform(df[['Height']])"
  },
  {
    "Input": "Standardize the 'Height' column using the maximum value as the scaling factor.",
    "Output": "scaler = MaxAbsScaler()\ndf['Height_scale'] = scaler.fit_transform(df[['Height']])"
  },
  {
    "Input": "Adjust the 'Height' column by dividing each value by the highest height.",
    "Output": "scaler = MaxAbsScaler()\ndf['Height_scale'] = scaler.fit_transform(df[['Height']])"
  },
  {
    "Input": "Reshape the 'Height' column by dividing each value by the maximum.",
    "Output": "scaler = MaxAbsScaler()\ndf['Height_scale'] = scaler.fit_transform(df[['Height']])"
  },
  {
    "Input": "Transform the 'Height' column to a range of 0 to 1 using maximum value scaling.",
    "Output": "scaler = MaxAbsScaler()\ndf['Height_scale'] = scaler.fit_transform(df[['Height']])"
  },
  {
    "Input": "Normalize the 'Height' column using maximum value normalization.",
    "Output": "scaler = MaxAbsScaler()\ndf['Height_scale'] = scaler.fit_transform(df[['Height']])"
  },
  {
    "Input": "Encode 'Temperature' column with ordinal encoding based on 'Low', 'Medium', 'High' categories.",
    "Output": "encoder = OrdinalEncoder(categories=[['Low', 'Medium', 'High']])\ndf['Temperature']=encoder.fit_transform(df[['Temperature']])"
  },
  {
    "Input": "Apply ordinal encoding to 'Temperature' column, mapping 'Low' to 0, 'Medium' to 1, and 'High' to 2.",
    "Output": "encoder = OrdinalEncoder(categories=[['Low', 'Medium', 'High']])\ndf['Temperature']=encoder.fit_transform(df[['Temperature']])"
  },
  {
    "Input": "Transform 'Temperature' column using ordinal encoding with 'Low', 'Medium', 'High' as ordinal levels.",
    "Output": "encoder = OrdinalEncoder(categories=[['Low', 'Medium', 'High']])\ndf['Temperature']=encoder.fit_transform(df[['Temperature']])"
  },
  {
    "Input": "Convert 'Temperature' categorical values to numerical using ordinal encoding with 'Low', 'Medium', 'High' order.",
    "Output": "encoder = OrdinalEncoder(categories=[['Low', 'Medium', 'High']])\ndf['Temperature']=encoder.fit_transform(df[['Temperature']])"
  },
  {
    "Input": "Create ordinal encoded representation of 'Temperature' column based on 'Low', 'Medium', 'High' order.",
    "Output": "encoder = OrdinalEncoder(categories=[['Low', 'Medium', 'High']])\ndf['Temperature']=encoder.fit_transform(df[['Temperature']])"
  },
  {
    "Input": "Encode 'Temperature' column with ordinal values, assigning 'Low' as 0, 'Medium' as 1, and 'High' as 2.",
    "Output": "encoder = OrdinalEncoder(categories=[['Low', 'Medium', 'High']])\ndf['Temperature']=encoder.fit_transform(df[['Temperature']])"
  },
  {
    "Input": "Perform ordinal encoding on 'Temperature' column, ordering categories as 'Low', 'Medium', 'High'.",
    "Output": "encoder = OrdinalEncoder(categories=[['Low', 'Medium', 'High']])\ndf['Temperature']=encoder.fit_transform(df[['Temperature']])"
  },
  {
    "Input": "Use ordinal encoding to map 'Temperature' categories 'Low', 'Medium', 'High' to numerical values.",
    "Output": "encoder = OrdinalEncoder(categories=[['Low', 'Medium', 'High']])\ndf['Temperature']=encoder.fit_transform(df[['Temperature']])"
  },
  {
    "Input": "Apply ordinal encoding to 'Temperature' column, assigning 0 to 'Low', 1 to 'Medium', and 2 to 'High'.",
    "Output": "encoder = OrdinalEncoder(categories=[['Low', 'Medium', 'High']])\ndf['Temperature']=encoder.fit_transform(df[['Temperature']])"
  },
  {
    "Input": "Ordinal encode 'Temperature' column, mapping 'Low' to 0, 'Medium' to 1, and 'High' to 2.",
    "Output": "encoder = OrdinalEncoder(categories=[['Low', 'Medium', 'High']])\ndf['Temperature']=encoder.fit_transform(df[['Temperature']])"
  },
  {
    "Input": "Transform the 'Temperature' column by converting Fahrenheit to Celsius using the formula C = (F-32)*5.0/9.0",
    "Output": "df['Temperature_C'] = df['Temperature_F'].apply(lambda x: (x-32)*5.0/9.0)"
  },
  {
    "Input": "Apply the conversion from Fahrenheit to Celsius to the 'Temperature' column, with the formula C = (F-32)*5.0/9.0",
    "Output": "df['Temperature_C'] = df['Temperature_F'].apply(lambda x: (x-32)*5.0/9.0)"
  },
  {
    "Input": "Create a new column 'Temperature_C' by converting 'Temperature' column from Fahrenheit to Celsius using C = (F-32)*5.0/9.0",
    "Output": "df['Temperature_C'] = df['Temperature_F'].apply(lambda x: (x-32)*5.0/9.0)"
  },
  {
    "Input": "Convert the 'Temperature' column, which is in Fahrenheit, to Celsius using the formula C = (F-32)*5.0/9.0 and store it in a new column 'Temperature_C'",
    "Output": "df['Temperature_C'] = df['Temperature_F'].apply(lambda x: (x-32)*5.0/9.0)"
  },
  {
    "Input": "Calculate the Celsius equivalent of the 'Temperature' column (in Fahrenheit) and save it as a new column 'Temperature_C' using C = (F-32)*5.0/9.0",
    "Output": "df['Temperature_C'] = df['Temperature_F'].apply(lambda x: (x-32)*5.0/9.0)"
  },
  {
    "Input": "Use the formula C = (F-32)*5.0/9.0 to convert the 'Temperature' column from Fahrenheit to Celsius and generate a new column named 'Temperature_C'",
    "Output": "df['Temperature_C'] = df['Temperature_F'].apply(lambda x: (x-32)*5.0/9.0)"
  },
  {
    "Input": "Perform a Fahrenheit to Celsius conversion on the 'Temperature' column using the equation C = (F-32)*5.0/9.0, creating a new column 'Temperature_C'",
    "Output": "df['Temperature_C'] = df['Temperature_F'].apply(lambda x: (x-32)*5.0/9.0)"
  },
  {
    "Input": "Convert the values in the 'Temperature' column from Fahrenheit to Celsius based on the formula C = (F-32)*5.0/9.0 and store the results in a column named 'Temperature_C'",
    "Output": "df['Temperature_C'] = df['Temperature_F'].apply(lambda x: (x-32)*5.0/9.0)"
  },
  {
    "Input": "Create a new column 'Temperature_C' representing the Celsius values by converting the 'Temperature' column (Fahrenheit) using the formula C = (F-32)*5.0/9.0",
    "Output": "df['Temperature_C'] = df['Temperature_F'].apply(lambda x: (x-32)*5.0/9.0)"
  },
  {
    "Input": "Add a new column 'Temperature_C' to the dataframe by converting the 'Temperature' column from Fahrenheit to Celsius using the equation C = (F-32)*5.0/9.0",
    "Output": "df['Temperature_C'] = df['Temperature_F'].apply(lambda x: (x-32)*5.0/9.0)"
  },
  {
    "Input": "Create a new column 'Full_Name' by concatenating 'First_Name' and 'Last_Name' with a space in between.",
    "Output": "df['Full_Name'] = df.apply(lambda row: f'''{row['First_Name']} {row['Last_Name']}''', axis=1)"
  },
  {
    "Input": "Merge 'First_Name' and 'Last_Name' columns to form a 'Full_Name' column.",
    "Output": "df['Full_Name'] = df.apply(lambda row: f'''{row['First_Name']} {row['Last_Name']}''', axis=1)"
  },
  {
    "Input": "Concatenate the values from 'First_Name' and 'Last_Name' to create a full name in a new column called 'Full_Name'.",
    "Output": "df['Full_Name'] = df.apply(lambda row: f'''{row['First_Name']} {row['Last_Name']}''', axis=1)"
  },
  {
    "Input": "Combine the 'First_Name' and 'Last_Name' columns into a single 'Full_Name' column, adding a space between the names.",
    "Output": "df['Full_Name'] = df.apply(lambda row: f'''{row['First_Name']} {row['Last_Name']}''', axis=1)"
  },
  {
    "Input": "Generate a 'Full_Name' column by joining 'First_Name' and 'Last_Name' with a space as the separator.",
    "Output": "df['Full_Name'] = df.apply(lambda row: f'''{row['First_Name']} {row['Last_Name']}''', axis=1)"
  },
  {
    "Input": "Create a 'Full_Name' column by combining the values from 'First_Name' and 'Last_Name', separated by a space.",
    "Output": "df['Full_Name'] = df.apply(lambda row: f'''{row['First_Name']} {row['Last_Name']}''', axis=1)"
  },
  {
    "Input": "Add a new column named 'Full_Name' that contains the combined values of 'First_Name' and 'Last_Name' with a space in between.",
    "Output": "df['Full_Name'] = df.apply(lambda row: f'''{row['First_Name']} {row['Last_Name']}''', axis=1)"
  },
  {
    "Input": "Form a 'Full_Name' column by joining the 'First_Name' and 'Last_Name' columns, separating them with a space.",
    "Output": "df['Full_Name'] = df.apply(lambda row: f'''{row['First_Name']} {row['Last_Name']}''', axis=1)"
  },
  {
    "Input": "Construct a 'Full_Name' column by concatenating the 'First_Name' and 'Last_Name' columns with a space as the delimiter.",
    "Output": "df['Full_Name'] = df.apply(lambda row: f'''{row['First_Name']} {row['Last_Name']}''', axis=1)"
  },
  {
    "Input": "Add a new 'Full_Name' column that combines the text from 'First_Name' and 'Last_Name' with a space between them.",
    "Output": "df['Full_Name'] = df.apply(lambda row: f'''{row['First_Name']} {row['Last_Name']}''', axis=1)"
  }
]